
UART_Project_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b0  080080b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b8  080080b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080080c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000798  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a8  200007a8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024e36  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d83  00000000  00000000  00044eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002050  00000000  00000000  00049c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000192b  00000000  00000000  0004bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028b02  00000000  00000000  0004d5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002696f  00000000  00000000  000760bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3d38  00000000  00000000  0009ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008b1c  00000000  00000000  00190764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00199280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008070 	.word	0x08008070

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008070 	.word	0x08008070

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 f819 	bl	8001550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f82b 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa99 	bl	8000a58 <MX_GPIO_Init>
  MX_CRC_Init();
 8000526:	f000 f891 	bl	800064c <MX_CRC_Init>
  MX_DMA2D_Init();
 800052a:	f000 f8a3 	bl	8000674 <MX_DMA2D_Init>
  MX_FMC_Init();
 800052e:	f000 fa43 	bl	80009b8 <MX_FMC_Init>
  MX_I2C3_Init();
 8000532:	f000 f8d1 	bl	80006d8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000536:	f000 f90f 	bl	8000758 <MX_LTDC_Init>
  MX_SPI5_Init();
 800053a:	f000 f98d 	bl	8000858 <MX_SPI5_Init>
  MX_TIM1_Init();
 800053e:	f000 f9c1 	bl	80008c4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fa0f 	bl	8000964 <MX_USART1_UART_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  char Hello []= "Hello world !";
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x5c>)
 8000548:	463c      	mov	r4, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	c407      	stmia	r4!, {r0, r1, r2}
 800054e:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t *)&Hello , strlen(Hello) , 1);
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe4c 	bl	80001f0 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	4639      	mov	r1, r7
 800055e:	2301      	movs	r3, #1
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0x60>)
 8000562:	f005 fbcb 	bl	8005cfc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f001 f833 	bl	80015d4 <HAL_Delay>
  {
 800056e:	e7ef      	b.n	8000550 <main+0x3c>
 8000570:	08008088 	.word	0x08008088
 8000574:	20000210 	.word	0x20000210

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fd38 	bl	8007ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f0:	2348      	movs	r3, #72	; 0x48
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f003 ff6f 	bl	80044e4 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 fb46 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f004 f9d1 	bl	80049d4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000638:	f000 fb30 	bl	8000c9c <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CRC_Init+0x20>)
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <MX_CRC_Init+0x24>)
 8000654:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_CRC_Init+0x20>)
 8000658:	f001 f8c2 	bl	80017e0 <HAL_CRC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000662:	f000 fb1b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	40023000 	.word	0x40023000

08000674 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_DMA2D_Init+0x60>)
 800067c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 80006aa:	f001 f8b5 	bl	8001818 <HAL_DMA2D_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006b4:	f000 faf2 	bl	8000c9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006b8:	2101      	movs	r1, #1
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x5c>)
 80006bc:	f001 fa06 	bl	8001acc <HAL_DMA2D_ConfigLayer>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006c6:	f000 fae9 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000034 	.word	0x20000034
 80006d4:	4002b000 	.word	0x4002b000

080006d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C3_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C3_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C3_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C3_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C3_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C3_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C3_Init+0x74>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2C3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C3_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2C3_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C3_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_I2C3_Init+0x74>)
 8000716:	f003 f9bd 	bl	8003a94 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fabc 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4809      	ldr	r0, [pc, #36]	; (800074c <MX_I2C3_Init+0x74>)
 8000728:	f003 faf8 	bl	8003d1c <HAL_I2CEx_ConfigAnalogFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000732:	f000 fab3 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C3_Init+0x74>)
 800073a:	f003 fb2b 	bl	8003d94 <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000744:	f000 faaa 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000074 	.word	0x20000074
 8000750:	40005c00 	.word	0x40005c00
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2234      	movs	r2, #52	; 0x34
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f007 fc49 	bl	8007ffc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800076a:	4b39      	ldr	r3, [pc, #228]	; (8000850 <MX_LTDC_Init+0xf8>)
 800076c:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MX_LTDC_Init+0xfc>)
 800076e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <MX_LTDC_Init+0xf8>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <MX_LTDC_Init+0xf8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_LTDC_Init+0xf8>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <MX_LTDC_Init+0xf8>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_LTDC_Init+0xf8>)
 800078a:	2209      	movs	r2, #9
 800078c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800078e:	4b30      	ldr	r3, [pc, #192]	; (8000850 <MX_LTDC_Init+0xf8>)
 8000790:	2201      	movs	r2, #1
 8000792:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_LTDC_Init+0xf8>)
 8000796:	221d      	movs	r2, #29
 8000798:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_LTDC_Init+0xf8>)
 800079c:	2203      	movs	r2, #3
 800079e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007a2:	f240 120d 	movw	r2, #269	; 0x10d
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007aa:	f240 1243 	movw	r2, #323	; 0x143
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007b2:	f240 1217 	movw	r2, #279	; 0x117
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007ba:	f240 1247 	movw	r2, #327	; 0x147
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_LTDC_Init+0xf8>)
 80007da:	f003 fb1b 	bl	8003e14 <HAL_LTDC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 fa5a 	bl	8000c9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007ec:	23f0      	movs	r3, #240	; 0xf0
 80007ee:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007f8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007fe:	23ff      	movs	r3, #255	; 0xff
 8000800:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000806:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800080a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800080c:	2307      	movs	r3, #7
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000810:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000816:	23f0      	movs	r3, #240	; 0xf0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800081a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_LTDC_Init+0xf8>)
 800083a:	f003 fc7d 	bl	8004138 <HAL_LTDC_ConfigLayer>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000844:	f000 fa2a 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000c8 	.word	0x200000c8
 8000854:	40016800 	.word	0x40016800

08000858 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI5_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_SPI5_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI5_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI5_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI5_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI5_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI5_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI5_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI5_Init+0x64>)
 800088c:	2218      	movs	r2, #24
 800088e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI5_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI5_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI5_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI5_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_SPI5_Init+0x64>)
 80008aa:	f004 fcd9 	bl	8005260 <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f9f2 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000170 	.word	0x20000170
 80008c0:	40015000 	.word	0x40015000

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_TIM1_Init+0x98>)
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MX_TIM1_Init+0x9c>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_TIM1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM1_Init+0x98>)
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_TIM1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_TIM1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_TIM1_Init+0x98>)
 800090e:	f004 fd30 	bl	8005372 <HAL_TIM_Base_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f9c0 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM1_Init+0x98>)
 800092a:	f004 fed1 	bl	80056d0 <HAL_TIM_ConfigClockSource>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000934:	f000 f9b2 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM1_Init+0x98>)
 8000946:	f005 f8f9 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 f9a4 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001c8 	.word	0x200001c8
 8000960:	40010000 	.word	0x40010000

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART1_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800099c:	f005 f95e 	bl	8005c5c <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f979 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000210 	.word	0x20000210
 80009b4:	40011000 	.word	0x40011000

080009b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_FMC_Init+0x98>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <MX_FMC_Init+0x9c>)
 80009d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_FMC_Init+0x98>)
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_FMC_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_FMC_Init+0x98>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_FMC_Init+0x98>)
 80009ea:	2210      	movs	r2, #16
 80009ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_FMC_Init+0x98>)
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_FMC_Init+0x98>)
 80009f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_FMC_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_FMC_Init+0x98>)
 8000a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a08:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_FMC_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_FMC_Init+0x98>)
 8000a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_FMC_Init+0x98>)
 8000a3a:	f004 fbdd 	bl	80051f8 <HAL_SDRAM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a44:	f000 f92a 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000258 	.word	0x20000258
 8000a54:	a0000140 	.word	0xa0000140

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a7a      	ldr	r2, [pc, #488]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b78      	ldr	r3, [pc, #480]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
 8000a8e:	4b74      	ldr	r3, [pc, #464]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a73      	ldr	r2, [pc, #460]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b71      	ldr	r3, [pc, #452]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	4b6d      	ldr	r3, [pc, #436]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a6c      	ldr	r2, [pc, #432]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	4b66      	ldr	r3, [pc, #408]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a65      	ldr	r2, [pc, #404]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b63      	ldr	r3, [pc, #396]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b5f      	ldr	r3, [pc, #380]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a5e      	ldr	r2, [pc, #376]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a57      	ldr	r2, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a50      	ldr	r2, [pc, #320]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b4e      	ldr	r3, [pc, #312]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b4a      	ldr	r3, [pc, #296]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a49      	ldr	r2, [pc, #292]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2116      	movs	r1, #22
 8000b52:	4844      	ldr	r0, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x20c>)
 8000b54:	f001 f9f8 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	4842      	ldr	r0, [pc, #264]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000b5e:	f001 f9f3 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b68:	4840      	ldr	r0, [pc, #256]	; (8000c6c <MX_GPIO_Init+0x214>)
 8000b6a:	f001 f9ed 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b74:	483e      	ldr	r0, [pc, #248]	; (8000c70 <MX_GPIO_Init+0x218>)
 8000b76:	f001 f9e7 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b7a:	2316      	movs	r3, #22
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4834      	ldr	r0, [pc, #208]	; (8000c64 <MX_GPIO_Init+0x20c>)
 8000b92:	f001 f82d 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b96:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	482e      	ldr	r0, [pc, #184]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000bae:	f001 f81f 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000bca:	f001 f811 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4820      	ldr	r0, [pc, #128]	; (8000c64 <MX_GPIO_Init+0x20c>)
 8000be4:	f001 f804 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000be8:	2304      	movs	r3, #4
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481e      	ldr	r0, [pc, #120]	; (8000c74 <MX_GPIO_Init+0x21c>)
 8000bfc:	f000 fff8 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4815      	ldr	r0, [pc, #84]	; (8000c6c <MX_GPIO_Init+0x214>)
 8000c16:	f000 ffeb 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_GPIO_Init+0x214>)
 8000c34:	f000 ffdc 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_GPIO_Init+0x218>)
 8000c52:	f000 ffcd 	bl	8001bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020c00 	.word	0x40020c00
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 fc83 	bl	8001594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40001000 	.word	0x40001000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_MspInit+0x54>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_MspInit+0x54>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f000 fd4d 	bl	800178c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_CRC_MspInit+0x3c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10d      	bne.n	8000d2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_CRC_MspInit+0x40>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_CRC_MspInit+0x40>)
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_CRC_MspInit+0x40>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023000 	.word	0x40023000
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_DMA2D_MspInit+0x48>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d115      	bne.n	8000d82 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_DMA2D_MspInit+0x4c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <HAL_DMA2D_MspInit+0x4c>)
 8000d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_DMA2D_MspInit+0x4c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	205a      	movs	r0, #90	; 0x5a
 8000d78:	f000 fd08 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d7c:	205a      	movs	r0, #90	; 0x5a
 8000d7e:	f000 fd21 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	4002b000 	.word	0x4002b000
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <HAL_I2C_MspInit+0xc4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d14b      	bne.n	8000e4e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e00:	2304      	movs	r3, #4
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e0c:	f000 fef0 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e16:	2312      	movs	r3, #18
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e22:	2304      	movs	r3, #4
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <HAL_I2C_MspInit+0xd0>)
 8000e2e:	f000 fedf 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40005c00 	.word	0x40005c00
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09a      	sub	sp, #104	; 0x68
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	2230      	movs	r2, #48	; 0x30
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f007 f8b7 	bl	8007ffc <memset>
  if(hltdc->Instance==LTDC)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a85      	ldr	r2, [pc, #532]	; (80010a8 <HAL_LTDC_MspInit+0x240>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	f040 8102 	bne.w	800109e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000e9e:	2332      	movs	r3, #50	; 0x32
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 ffe2 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000eba:	f7ff feef 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	4b7a      	ldr	r3, [pc, #488]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a79      	ldr	r2, [pc, #484]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b77      	ldr	r3, [pc, #476]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	4b73      	ldr	r3, [pc, #460]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a72      	ldr	r2, [pc, #456]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b70      	ldr	r3, [pc, #448]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a6b      	ldr	r2, [pc, #428]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b65      	ldr	r3, [pc, #404]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a64      	ldr	r2, [pc, #400]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b62      	ldr	r3, [pc, #392]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b5e      	ldr	r3, [pc, #376]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a5d      	ldr	r2, [pc, #372]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b50      	ldr	r3, [pc, #320]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <HAL_LTDC_MspInit+0x244>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f86:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f94:	230e      	movs	r3, #14
 8000f96:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4844      	ldr	r0, [pc, #272]	; (80010b0 <HAL_LTDC_MspInit+0x248>)
 8000fa0:	f000 fe26 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fa4:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fa8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	483c      	ldr	r0, [pc, #240]	; (80010b4 <HAL_LTDC_MspInit+0x24c>)
 8000fc2:	f000 fe15 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fd6:	2309      	movs	r3, #9
 8000fd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4835      	ldr	r0, [pc, #212]	; (80010b8 <HAL_LTDC_MspInit+0x250>)
 8000fe2:	f000 fe05 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fe6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001000:	4619      	mov	r1, r3
 8001002:	482d      	ldr	r0, [pc, #180]	; (80010b8 <HAL_LTDC_MspInit+0x250>)
 8001004:	f000 fdf4 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001008:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800100c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101a:	230e      	movs	r3, #14
 800101c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001022:	4619      	mov	r1, r3
 8001024:	4825      	ldr	r0, [pc, #148]	; (80010bc <HAL_LTDC_MspInit+0x254>)
 8001026:	f000 fde3 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800102a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103c:	230e      	movs	r3, #14
 800103e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001044:	4619      	mov	r1, r3
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <HAL_LTDC_MspInit+0x258>)
 8001048:	f000 fdd2 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800104c:	2348      	movs	r3, #72	; 0x48
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105c:	230e      	movs	r3, #14
 800105e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	4619      	mov	r1, r3
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <HAL_LTDC_MspInit+0x25c>)
 8001068:	f000 fdc2 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800106c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001070:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800107e:	2309      	movs	r3, #9
 8001080:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <HAL_LTDC_MspInit+0x254>)
 800108a:	f000 fdb1 	bl	8001bf0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2058      	movs	r0, #88	; 0x58
 8001094:	f000 fb7a 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001098:	2058      	movs	r0, #88	; 0x58
 800109a:	f000 fb93 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3768      	adds	r7, #104	; 0x68
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40016800 	.word	0x40016800
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020c00 	.word	0x40020c00

080010c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_SPI_MspInit+0x84>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12c      	bne.n	8001144 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_SPI_MspInit+0x88>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_SPI_MspInit+0x88>)
 80010f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_SPI_MspInit+0x88>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_SPI_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_SPI_MspInit+0x88>)
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_SPI_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001122:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001134:	2305      	movs	r3, #5
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 8001140:	f000 fd56 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40015000 	.word	0x40015000
 8001150:	40023800 	.word	0x40023800
 8001154:	40021400 	.word	0x40021400

08001158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_TIM_Base_MspInit+0x3c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10d      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_TIM_Base_MspInit+0x40>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_TIM_Base_MspInit+0x40>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_TIM_Base_MspInit+0x40>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40010000 	.word	0x40010000
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_UART_MspInit+0x84>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12c      	bne.n	8001218 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_UART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001208:	2307      	movs	r3, #7
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_UART_MspInit+0x8c>)
 8001214:	f000 fcec 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40011000 	.word	0x40011000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_FMC_MspInit+0x104>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d16f      	bne.n	8001328 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <HAL_FMC_MspInit+0x104>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_FMC_MspInit+0x108>)
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <HAL_FMC_MspInit+0x108>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6393      	str	r3, [r2, #56]	; 0x38
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_FMC_MspInit+0x108>)
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800126a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800126e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127c:	230c      	movs	r3, #12
 800127e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	482c      	ldr	r0, [pc, #176]	; (8001338 <HAL_FMC_MspInit+0x10c>)
 8001286:	f000 fcb3 	bl	8001bf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4826      	ldr	r0, [pc, #152]	; (800133c <HAL_FMC_MspInit+0x110>)
 80012a4:	f000 fca4 	bl	8001bf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80012ac:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ba:	230c      	movs	r3, #12
 80012bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	481f      	ldr	r0, [pc, #124]	; (8001340 <HAL_FMC_MspInit+0x114>)
 80012c4:	f000 fc94 	bl	8001bf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012cc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	230c      	movs	r3, #12
 80012dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4818      	ldr	r0, [pc, #96]	; (8001344 <HAL_FMC_MspInit+0x118>)
 80012e4:	f000 fc84 	bl	8001bf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80012e8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012ec:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fa:	230c      	movs	r3, #12
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <HAL_FMC_MspInit+0x11c>)
 8001304:	f000 fc74 	bl	8001bf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001318:	230c      	movs	r3, #12
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <HAL_FMC_MspInit+0x120>)
 8001322:	f000 fc65 	bl	8001bf0 <HAL_GPIO_Init>
 8001326:	e000      	b.n	800132a <HAL_FMC_MspInit+0xfe>
    return;
 8001328:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000028c 	.word	0x2000028c
 8001334:	40023800 	.word	0x40023800
 8001338:	40021400 	.word	0x40021400
 800133c:	40020800 	.word	0x40020800
 8001340:	40021800 	.word	0x40021800
 8001344:	40021000 	.word	0x40021000
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001358:	f7ff ff68 	bl	800122c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <HAL_InitTick+0xe4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_InitTick+0xe4>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_InitTick+0xe4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001390:	f107 0210 	add.w	r2, r7, #16
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fd3a 	bl	8004e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013aa:	f003 fd0b 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 80013ae:	6378      	str	r0, [r7, #52]	; 0x34
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b2:	f003 fd07 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_InitTick+0xe8>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	3b01      	subs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_InitTick+0xec>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_InitTick+0xf0>)
 80013ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_InitTick+0xec>)
 80013d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_InitTick+0xec>)
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_InitTick+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_InitTick+0xec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_InitTick+0xec>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <HAL_InitTick+0xec>)
 80013f2:	f003 ffbe 	bl	8005372 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11b      	bne.n	800143c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <HAL_InitTick+0xec>)
 8001406:	f004 f803 	bl	8005410 <HAL_TIM_Base_Start_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f000 f9d3 	bl	80017c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d808      	bhi.n	8001436 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2036      	movs	r0, #54	; 0x36
 800142a:	f000 f9af 	bl	800178c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_InitTick+0xf4>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e002      	b.n	800143c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001440:	4618      	mov	r0, r3
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	431bde83 	.word	0x431bde83
 8001450:	20000290 	.word	0x20000290
 8001454:	40001000 	.word	0x40001000
 8001458:	20000004 	.word	0x20000004

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM6_DAC_IRQHandler+0x10>)
 800148e:	f004 f82f 	bl	80054f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000290 	.word	0x20000290

0800149c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <OTG_HS_IRQHandler+0x10>)
 80014a2:	f000 fd6a 	bl	8001f7a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200003c8 	.word	0x200003c8

080014b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <LTDC_IRQHandler+0x10>)
 80014b6:	f002 fd7d 	bl	8003fb4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000c8 	.word	0x200000c8

080014c4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA2D_IRQHandler+0x10>)
 80014ca:	f000 f9ee 	bl	80018aa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000034 	.word	0x20000034

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001500:	f7ff ffea 	bl	80014d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152a:	f006 fd6f 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7fe fff1 	bl	8000514 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001534:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001540:	080080c0 	.word	0x080080c0
  ldr r2, =_sbss
 8001544:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001548:	200007a8 	.word	0x200007a8

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f8fc 	bl	8001776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fef0 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fb90 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	200002d8 	.word	0x200002d8

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200002d8 	.word	0x200002d8

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff4c 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179e:	f7ff ff61 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	6978      	ldr	r0, [r7, #20]
 80017aa:	f7ff ffb1 	bl	8001710 <NVIC_EncodePriority>
 80017ae:	4602      	mov	r2, r0
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff80 	bl	80016bc <__NVIC_SetPriority>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff54 	bl	8001680 <__NVIC_EnableIRQ>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fa7c 	bl	8000d00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e03b      	b.n	80018a2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fa80 	bl	8000d44 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	f023 0107 	bic.w	r1, r3, #7
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001882:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68d1      	ldr	r1, [r2, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	430b      	orrs	r3, r1
 8001890:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d026      	beq.n	800191a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d021      	beq.n	800191a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d026      	beq.n	8001972 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d021      	beq.n	8001972 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800193c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d026      	beq.n	80019ca <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	2b00      	cmp	r3, #0
 8001984:	d021      	beq.n	80019ca <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2208      	movs	r2, #8
 800199c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00e      	beq.n	80019fc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2204      	movs	r2, #4
 80019f4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f853 	bl	8001aa2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d024      	beq.n	8001a50 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01f      	beq.n	8001a50 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2202      	movs	r2, #2
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01f      	beq.n	8001a9a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01a      	beq.n	8001a9a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a72:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f80e 	bl	8001ab6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_DMA2D_ConfigLayer+0x20>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e079      	b.n	8001be0 <HAL_DMA2D_ConfigLayer+0x114>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	3318      	adds	r3, #24
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b16:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_DMA2D_ConfigLayer+0x120>)
 8001b18:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d003      	beq.n	8001b2a <HAL_DMA2D_ConfigLayer+0x5e>
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d107      	bne.n	8001b3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e005      	b.n	8001b46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	061b      	lsls	r3, r3, #24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d120      	bne.n	8001b8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	ea02 0103 	and.w	r1, r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	d003      	beq.n	8001b7e <HAL_DMA2D_ConfigLayer+0xb2>
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d127      	bne.n	8001bce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b8c:	e01f      	b.n	8001bce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	ea02 0103 	and.w	r1, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b0a      	cmp	r3, #10
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d106      	bne.n	8001bce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001bcc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	ff03000f 	.word	0xff03000f

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e177      	b.n	8001efc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8166 	bne.w	8001ef6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80c0 	beq.w	8001ef6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_GPIO_Init+0x324>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_GPIO_Init+0x324>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_GPIO_Init+0x324>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a61      	ldr	r2, [pc, #388]	; (8001f18 <HAL_GPIO_Init+0x328>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_GPIO_Init+0x32c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d037      	beq.n	8001e2e <HAL_GPIO_Init+0x23e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d031      	beq.n	8001e2a <HAL_GPIO_Init+0x23a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <HAL_GPIO_Init+0x334>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d02b      	beq.n	8001e26 <HAL_GPIO_Init+0x236>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_GPIO_Init+0x338>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x232>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_GPIO_Init+0x33c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x22e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a53      	ldr	r2, [pc, #332]	; (8001f30 <HAL_GPIO_Init+0x340>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x22a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_GPIO_Init+0x344>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a51      	ldr	r2, [pc, #324]	; (8001f38 <HAL_GPIO_Init+0x348>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x222>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_GPIO_Init+0x34c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x21e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4f      	ldr	r2, [pc, #316]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x21a>
 8001e06:	2309      	movs	r3, #9
 8001e08:	e012      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e0a:	230a      	movs	r3, #10
 8001e0c:	e010      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e00e      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e16:	2306      	movs	r3, #6
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x240>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	; (8001f18 <HAL_GPIO_Init+0x328>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_GPIO_Init+0x354>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f ae84 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021400 	.word	0x40021400
 8001f34:	40021800 	.word	0x40021800
 8001f38:	40021c00 	.word	0x40021c00
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40022400 	.word	0x40022400
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 fc43 	bl	800681c <USB_GetMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f040 80fb 	bne.w	8002194 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fc06 	bl	80067b4 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80f1 	beq.w	8002192 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fbfd 	bl	80067b4 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fc4:	d104      	bne.n	8001fd0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 fbed 	bl	80067b4 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe4:	d104      	bne.n	8001ff0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f004 fbdd 	bl	80067b4 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002004:	d104      	bne.n	8002010 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800200e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f004 fbcd 	bl	80067b4 <USB_ReadInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b02      	cmp	r3, #2
 8002022:	d103      	bne.n	800202c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fbbf 	bl	80067b4 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800203c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002040:	d120      	bne.n	8002084 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800204a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d113      	bne.n	8002084 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800205c:	2110      	movs	r1, #16
 800205e:	6938      	ldr	r0, [r7, #16]
 8002060:	f004 faf0 	bl	8006644 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002064:	6938      	ldr	r0, [r7, #16]
 8002066:	f004 fb1f 	bl	80066a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7a5b      	ldrb	r3, [r3, #9]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d105      	bne.n	800207e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fbdd 	bl	8006838 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f005 ff38 	bl	8007ef4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fb93 	bl	80067b4 <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d102      	bne.n	80020a0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f001 fc87 	bl	80039ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 fb85 	bl	80067b4 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d106      	bne.n	80020c2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f005 ff01 	bl	8007ebc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fb74 	bl	80067b4 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d6:	d139      	bne.n	800214c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 fbe8 	bl	80068b2 <USB_HC_ReadInterrupt>
 80020e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e025      	b.n	8002136 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d018      	beq.n	8002130 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002114:	d106      	bne.n	8002124 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f859 	bl	80021d4 <HCD_HC_IN_IRQHandler>
 8002122:	e005      	b.n	8002130 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 febb 	bl	8002ea6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	795b      	ldrb	r3, [r3, #5]
 800213a:	461a      	mov	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d3d3      	bcc.n	80020ea <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800214a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fb2f 	bl	80067b4 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b10      	cmp	r3, #16
 800215e:	d101      	bne.n	8002164 <HAL_HCD_IRQHandler+0x1ea>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_HCD_IRQHandler+0x1ec>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d014      	beq.n	8002194 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0210 	bic.w	r2, r2, #16
 8002178:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f001 fb38 	bl	80037f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0210 	orr.w	r2, r2, #16
 800218e:	619a      	str	r2, [r3, #24]
 8002190:	e000      	b.n	8002194 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002192:	bf00      	nop
    }
  }
}
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_HCD_Stop+0x16>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00d      	b.n	80021cc <HAL_HCD_Stop+0x32>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fca9 	bl	8006b14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 faf1 	bl	80067da <USB_ReadChInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d11a      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	461a      	mov	r2, r3
 8002210:	2304      	movs	r3, #4
 8002212:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	334d      	adds	r3, #77	; 0x4d
 8002224:	2207      	movs	r2, #7
 8002226:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f004 fb4f 	bl	80068d4 <USB_HC_Halt>
 8002236:	e09e      	b.n	8002376 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f004 faca 	bl	80067da <USB_ReadChInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002250:	d11b      	bne.n	800228a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	461a      	mov	r2, r3
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	; 0x4d
 8002276:	2208      	movs	r2, #8
 8002278:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f004 fb26 	bl	80068d4 <USB_HC_Halt>
 8002288:	e075      	b.n	8002376 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f004 faa1 	bl	80067da <USB_ReadChInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11a      	bne.n	80022d8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	2308      	movs	r3, #8
 80022b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	334d      	adds	r3, #77	; 0x4d
 80022c4:	2206      	movs	r2, #6
 80022c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 faff 	bl	80068d4 <USB_HC_Halt>
 80022d6:	e04e      	b.n	8002376 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fa7a 	bl	80067da <USB_ReadChInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	d11b      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002304:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	334d      	adds	r3, #77	; 0x4d
 8002316:	2209      	movs	r2, #9
 8002318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f004 fad6 	bl	80068d4 <USB_HC_Halt>
 8002328:	e025      	b.n	8002376 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fa51 	bl	80067da <USB_ReadChInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b80      	cmp	r3, #128	; 0x80
 8002340:	d119      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334d      	adds	r3, #77	; 0x4d
 8002364:	2207      	movs	r2, #7
 8002366:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f004 faaf 	bl	80068d4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fa2b 	bl	80067da <USB_ReadChInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238e:	d112      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fa9b 	bl	80068d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	461a      	mov	r2, r3
 80023ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b0:	6093      	str	r3, [r2, #8]
 80023b2:	f000 bd75 	b.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fa0b 	bl	80067da <USB_ReadChInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	f040 8128 	bne.w	8002620 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	461a      	mov	r2, r3
 80023de:	2320      	movs	r3, #32
 80023e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	331b      	adds	r3, #27
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d119      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	0151      	lsls	r1, r2, #5
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	440a      	add	r2, r1
 8002422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	799b      	ldrb	r3, [r3, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3330      	adds	r3, #48	; 0x30
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	1ac9      	subs	r1, r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	3338      	adds	r3, #56	; 0x38
 800246a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334d      	adds	r3, #77	; 0x4d
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3344      	adds	r3, #68	; 0x44
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3326      	adds	r3, #38	; 0x26
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3326      	adds	r3, #38	; 0x26
 80024cc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d110      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 f9fa 	bl	80068d4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	6093      	str	r3, [r2, #8]
 80024f2:	e03d      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3326      	adds	r3, #38	; 0x26
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d00a      	beq.n	8002520 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3326      	adds	r3, #38	; 0x26
 800251a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800251c:	2b01      	cmp	r3, #1
 800251e:	d127      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	0151      	lsls	r1, r2, #5
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	440a      	add	r2, r1
 8002536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800253e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	334c      	adds	r3, #76	; 0x4c
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	334c      	adds	r3, #76	; 0x4c
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f005 fcd0 	bl	8007f10 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	799b      	ldrb	r3, [r3, #6]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d13b      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3338      	adds	r3, #56	; 0x38
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4403      	add	r3, r0
 8002598:	3328      	adds	r3, #40	; 0x28
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	440b      	add	r3, r1
 800259e:	1e59      	subs	r1, r3, #1
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	3328      	adds	r3, #40	; 0x28
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8470 	beq.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	333c      	adds	r3, #60	; 0x3c
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2d8      	uxtb	r0, r3
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	333c      	adds	r3, #60	; 0x3c
 80025e8:	4602      	mov	r2, r0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	f000 bc58 	b.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	333c      	adds	r3, #60	; 0x3c
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2d8      	uxtb	r0, r3
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	4602      	mov	r2, r0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	f000 bc40 	b.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f004 f8d6 	bl	80067da <USB_ReadChInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d131      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2320      	movs	r3, #32
 8002648:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	331a      	adds	r3, #26
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 841f 	bne.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	331b      	adds	r3, #27
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	334d      	adds	r3, #77	; 0x4d
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f004 f91e 	bl	80068d4 <USB_HC_Halt>
 8002698:	f000 bc02 	b.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 f898 	bl	80067da <USB_ReadChInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	f040 8305 	bne.w	8002cc0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	2302      	movs	r3, #2
 80026c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334d      	adds	r3, #77	; 0x4d
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d114      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	334d      	adds	r3, #77	; 0x4d
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	334c      	adds	r3, #76	; 0x4c
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e2cc      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	334d      	adds	r3, #77	; 0x4d
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b06      	cmp	r3, #6
 800271c:	d114      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334d      	adds	r3, #77	; 0x4d
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	334c      	adds	r3, #76	; 0x4c
 8002742:	2205      	movs	r2, #5
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e2ac      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	; 0x4d
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d00b      	beq.n	8002776 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334d      	adds	r3, #77	; 0x4d
 800276e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002770:	2b09      	cmp	r3, #9
 8002772:	f040 80a6 	bne.w	80028c2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334d      	adds	r3, #77	; 0x4d
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3344      	adds	r3, #68	; 0x44
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1c59      	adds	r1, r3, #1
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4403      	add	r3, r0
 80027aa:	3344      	adds	r3, #68	; 0x44
 80027ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3344      	adds	r3, #68	; 0x44
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d943      	bls.n	800284c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	; 0x44
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	331a      	adds	r3, #26
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d123      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331b      	adds	r3, #27
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	331c      	adds	r3, #28
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002834:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	; 0x4c
 8002846:	2204      	movs	r2, #4
 8002848:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800284a:	e229      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	; 0x4c
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3326      	adds	r3, #38	; 0x26
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3326      	adds	r3, #38	; 0x26
 8002886:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002888:	2b02      	cmp	r3, #2
 800288a:	f040 8209 	bne.w	8002ca0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028c0:	e1ee      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	334d      	adds	r3, #77	; 0x4d
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	f040 80c8 	bne.w	8002a6a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	334d      	adds	r3, #77	; 0x4d
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	331b      	adds	r3, #27
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 81ce 	bne.w	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3326      	adds	r3, #38	; 0x26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d16b      	bne.n	80029f4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3348      	adds	r3, #72	; 0x48
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4403      	add	r3, r0
 800293c:	3348      	adds	r3, #72	; 0x48
 800293e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d943      	bls.n	80029de <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3348      	adds	r3, #72	; 0x48
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	331b      	adds	r3, #27
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3344      	adds	r3, #68	; 0x44
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d809      	bhi.n	80029a8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	331c      	adds	r3, #28
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	0151      	lsls	r1, r2, #5
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	440a      	add	r2, r1
 80029be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	; 0x4c
 80029d8:	2204      	movs	r2, #4
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e014      	b.n	8002a08 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334c      	adds	r3, #76	; 0x4c
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e009      	b.n	8002a08 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	334c      	adds	r3, #76	; 0x4c
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3326      	adds	r3, #38	; 0x26
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3326      	adds	r3, #38	; 0x26
 8002a2e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f040 8136 	bne.w	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a4c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	e11b      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	334d      	adds	r3, #77	; 0x4d
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	f040 8081 	bne.w	8002b84 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	334d      	adds	r3, #77	; 0x4d
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	331b      	adds	r3, #27
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 80fa 	bne.w	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334c      	adds	r3, #76	; 0x4c
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	0151      	lsls	r1, r2, #5
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	0151      	lsls	r1, r2, #5
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	440a      	add	r2, r1
 8002af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b00:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	0151      	lsls	r1, r2, #5
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	440a      	add	r2, r1
 8002b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b1c:	f023 0320 	bic.w	r3, r3, #32
 8002b20:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3326      	adds	r3, #38	; 0x26
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3326      	adds	r3, #38	; 0x26
 8002b48:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f040 80a9 	bne.w	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e08e      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334d      	adds	r3, #77	; 0x4d
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d143      	bne.n	8002c22 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	334d      	adds	r3, #77	; 0x4d
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	334c      	adds	r3, #76	; 0x4c
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3326      	adds	r3, #38	; 0x26
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3326      	adds	r3, #38	; 0x26
 8002be8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d159      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c04:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c0c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e03f      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334d      	adds	r3, #77	; 0x4d
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d126      	bne.n	8002c86 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	; 0x4d
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3344      	adds	r3, #68	; 0x44
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4403      	add	r3, r0
 8002c6c:	3344      	adds	r3, #68	; 0x44
 8002c6e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334c      	adds	r3, #76	; 0x4c
 8002c80:	2204      	movs	r2, #4
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e00d      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	334d      	adds	r3, #77	; 0x4d
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f000 8100 	beq.w	8002e9e <HCD_HC_IN_IRQHandler+0xcca>
 8002c9e:	e000      	b.n	8002ca2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ca0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	334c      	adds	r3, #76	; 0x4c
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f005 f929 	bl	8007f10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cbe:	e0ef      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fd86 	bl	80067da <USB_ReadChInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d12f      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2340      	movs	r3, #64	; 0x40
 8002ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	334d      	adds	r3, #77	; 0x4d
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	331a      	adds	r3, #26
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3344      	adds	r3, #68	; 0x44
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fdcf 	bl	80068d4 <USB_HC_Halt>
 8002d36:	e0b3      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fd4a 	bl	80067da <USB_ReadChInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	f040 80a7 	bne.w	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3326      	adds	r3, #38	; 0x26
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d11b      	bne.n	8002da0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	334d      	adds	r3, #77	; 0x4d
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fd9b 	bl	80068d4 <USB_HC_Halt>
 8002d9e:	e03f      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3326      	adds	r3, #38	; 0x26
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3326      	adds	r3, #38	; 0x26
 8002dc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d129      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	799b      	ldrb	r3, [r3, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HCD_HC_IN_IRQHandler+0xc2a>
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	331b      	adds	r3, #27
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d110      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	334d      	adds	r3, #77	; 0x4d
 8002e0e:	2204      	movs	r2, #4
 8002e10:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fd5a 	bl	80068d4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	331b      	adds	r3, #27
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d129      	bne.n	8002e8a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	331b      	adds	r3, #27
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	0151      	lsls	r1, r2, #5
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	440a      	add	r2, r1
 8002e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	0151      	lsls	r1, r2, #5
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	440a      	add	r2, r1
 8002e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	2310      	movs	r3, #16
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	e000      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e9e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fc88 	bl	80067da <USB_ReadChInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d11b      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334d      	adds	r3, #77	; 0x4d
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fce6 	bl	80068d4 <USB_HC_Halt>
 8002f08:	f000 bc6f 	b.w	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fc60 	bl	80067da <USB_ReadChInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 8082 	bne.w	800302a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2320      	movs	r3, #32
 8002f36:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3319      	adds	r3, #25
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d124      	bne.n	8002f98 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3319      	adds	r3, #25
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	334c      	adds	r3, #76	; 0x4c
 8002f72:	2202      	movs	r2, #2
 8002f74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	334d      	adds	r3, #77	; 0x4d
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fc9e 	bl	80068d4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	331a      	adds	r3, #26
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 841d 	bne.w	80037ea <HCD_HC_OUT_IRQHandler+0x944>
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	331b      	adds	r3, #27
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8411 	bne.w	80037ea <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3326      	adds	r3, #38	; 0x26
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d009      	beq.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	331b      	adds	r3, #27
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	; 0x4d
 8003002:	2203      	movs	r2, #3
 8003004:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fc60 	bl	80068d4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3344      	adds	r3, #68	; 0x44
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e3df      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fbd1 	bl	80067da <USB_ReadChInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d111      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003056:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fc37 	bl	80068d4 <USB_HC_Halt>
 8003066:	e3c0      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fbb2 	bl	80067da <USB_ReadChInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d168      	bne.n	8003152 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3344      	adds	r3, #68	; 0x44
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fb9c 	bl	80067da <USB_ReadChInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d112      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3319      	adds	r3, #25
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	461a      	mov	r2, r3
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	331b      	adds	r3, #27
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d019      	beq.n	800311c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	331b      	adds	r3, #27
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	0151      	lsls	r1, r2, #5
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	440a      	add	r2, r1
 8003112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2301      	movs	r3, #1
 800312c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	; 0x4d
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fbc2 	bl	80068d4 <USB_HC_Halt>
 8003150:	e34b      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fb3d 	bl	80067da <USB_ReadChInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d139      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334d      	adds	r3, #77	; 0x4d
 800317a:	2205      	movs	r2, #5
 800317c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	331a      	adds	r3, #26
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3319      	adds	r3, #25
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3344      	adds	r3, #68	; 0x44
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fb85 	bl	80068d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	461a      	mov	r2, r3
 80031d8:	2340      	movs	r3, #64	; 0x40
 80031da:	6093      	str	r3, [r2, #8]
 80031dc:	e305      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 faf7 	bl	80067da <USB_ReadChInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d11a      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	2308      	movs	r3, #8
 8003206:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	334d      	adds	r3, #77	; 0x4d
 8003218:	2206      	movs	r2, #6
 800321a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fb55 	bl	80068d4 <USB_HC_Halt>
 800322a:	e2de      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fad0 	bl	80067da <USB_ReadChInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b10      	cmp	r3, #16
 8003242:	d144      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3344      	adds	r3, #68	; 0x44
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	; 0x4d
 8003268:	2204      	movs	r2, #4
 800326a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3319      	adds	r3, #25
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3318      	adds	r3, #24
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3319      	adds	r3, #25
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 fb0d 	bl	80068d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	461a      	mov	r2, r3
 80032c8:	2310      	movs	r3, #16
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e28d      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fa7f 	bl	80067da <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d169      	bne.n	80033ba <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	799b      	ldrb	r3, [r3, #6]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334d      	adds	r3, #77	; 0x4d
 80032fe:	2207      	movs	r2, #7
 8003300:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fae2 	bl	80068d4 <USB_HC_Halt>
 8003310:	e049      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3344      	adds	r3, #68	; 0x44
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c59      	adds	r1, r3, #1
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	3344      	adds	r3, #68	; 0x44
 8003334:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3344      	adds	r3, #68	; 0x44
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d922      	bls.n	8003392 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3344      	adds	r3, #68	; 0x44
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334c      	adds	r3, #76	; 0x4c
 8003370:	2204      	movs	r2, #4
 8003372:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334c      	adds	r3, #76	; 0x4c
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fdc0 	bl	8007f10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003390:	e009      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334c      	adds	r3, #76	; 0x4c
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	461a      	mov	r2, r3
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	6093      	str	r3, [r2, #8]
 80033b8:	e217      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 fa09 	bl	80067da <USB_ReadChInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d11b      	bne.n	800340c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	; 0x4d
 80033e4:	2209      	movs	r2, #9
 80033e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fa6f 	bl	80068d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	6093      	str	r3, [r2, #8]
 800340a:	e1ee      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f003 f9e0 	bl	80067da <USB_ReadChInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	f040 81df 	bne.w	80037e4 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	461a      	mov	r2, r3
 8003434:	2302      	movs	r3, #2
 8003436:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	334d      	adds	r3, #77	; 0x4d
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	f040 8093 	bne.w	8003576 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334d      	adds	r3, #77	; 0x4d
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	; 0x4c
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3326      	adds	r3, #38	; 0x26
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d00b      	beq.n	80034a6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3326      	adds	r3, #38	; 0x26
 800349e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	f040 8190 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	333d      	adds	r3, #61	; 0x3d
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2d8      	uxtb	r0, r3
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	333d      	adds	r3, #61	; 0x3d
 80034d6:	4602      	mov	r2, r0
 80034d8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	799b      	ldrb	r3, [r3, #6]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	f040 8171 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3334      	adds	r3, #52	; 0x34
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8165 	beq.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3334      	adds	r3, #52	; 0x34
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4403      	add	r3, r0
 800351c:	3328      	adds	r3, #40	; 0x28
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	440b      	add	r3, r1
 8003522:	1e59      	subs	r1, r3, #1
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4403      	add	r3, r0
 8003532:	3328      	adds	r3, #40	; 0x28
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	fbb1 f3f3 	udiv	r3, r1, r3
 800353a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 813f 	beq.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	333d      	adds	r3, #61	; 0x3d
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2d8      	uxtb	r0, r3
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333d      	adds	r3, #61	; 0x3d
 8003570:	4602      	mov	r2, r0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e127      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	334d      	adds	r3, #77	; 0x4d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d120      	bne.n	80035ce <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	; 0x4d
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	331b      	adds	r3, #27
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	f040 8107 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334c      	adds	r3, #76	; 0x4c
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e0fb      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	334d      	adds	r3, #77	; 0x4d
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d13a      	bne.n	800365a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	; 0x4d
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	334c      	adds	r3, #76	; 0x4c
 8003608:	2202      	movs	r2, #2
 800360a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	331b      	adds	r3, #27
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	f040 80d1 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	331b      	adds	r3, #27
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	440a      	add	r2, r1
 800364e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	e0b5      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	334d      	adds	r3, #77	; 0x4d
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d114      	bne.n	800369a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	334d      	adds	r3, #77	; 0x4d
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	334c      	adds	r3, #76	; 0x4c
 8003694:	2202      	movs	r2, #2
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e095      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	334d      	adds	r3, #77	; 0x4d
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b06      	cmp	r3, #6
 80036ae:	d114      	bne.n	80036da <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	; 0x4d
 80036c0:	2202      	movs	r2, #2
 80036c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	334c      	adds	r3, #76	; 0x4c
 80036d4:	2205      	movs	r2, #5
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e075      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334d      	adds	r3, #77	; 0x4d
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b07      	cmp	r3, #7
 80036ee:	d00a      	beq.n	8003706 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334d      	adds	r3, #77	; 0x4d
 8003700:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003702:	2b09      	cmp	r3, #9
 8003704:	d170      	bne.n	80037e8 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	; 0x4d
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	; 0x44
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	3344      	adds	r3, #68	; 0x44
 800373c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3344      	adds	r3, #68	; 0x44
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d914      	bls.n	800377e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3344      	adds	r3, #68	; 0x44
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334c      	adds	r3, #76	; 0x4c
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800377c:	e022      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334c      	adds	r3, #76	; 0x4c
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037c4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	334c      	adds	r3, #76	; 0x4c
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f004 fb97 	bl	8007f10 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037e2:	e002      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80037e8:	bf00      	nop
  }
}
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	0c5b      	lsrs	r3, r3, #17
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003824:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d004      	beq.n	8003836 <HCD_RXQLVL_IRQHandler+0x46>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b05      	cmp	r3, #5
 8003830:	f000 80b6 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003834:	e0b7      	b.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80b3 	beq.w	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	332c      	adds	r3, #44	; 0x2c
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a7 	beq.w	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3338      	adds	r3, #56	; 0x38
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	18d1      	adds	r1, r2, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	3334      	adds	r3, #52	; 0x34
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4299      	cmp	r1, r3
 8003880:	f200 8083 	bhi.w	800398a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	332c      	adds	r3, #44	; 0x2c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	b292      	uxth	r2, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f002 ff30 	bl	8006704 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	332c      	adds	r3, #44	; 0x2c
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	18d1      	adds	r1, r2, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4403      	add	r3, r0
 80038c8:	332c      	adds	r3, #44	; 0x2c
 80038ca:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3338      	adds	r3, #56	; 0x38
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	18d1      	adds	r1, r2, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4403      	add	r3, r0
 80038f0:	3338      	adds	r3, #56	; 0x38
 80038f2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	0cdb      	lsrs	r3, r3, #19
 8003904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003908:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3328      	adds	r3, #40	; 0x28
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4293      	cmp	r3, r2
 8003922:	d13f      	bne.n	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03c      	beq.n	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003940:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003948:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	333c      	adds	r3, #60	; 0x3c
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	333c      	adds	r3, #60	; 0x3c
 8003984:	4602      	mov	r2, r0
 8003986:	701a      	strb	r2, [r3, #0]
      break;
 8003988:	e00c      	b.n	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	334c      	adds	r3, #76	; 0x4c
 800399a:	2204      	movs	r2, #4
 800399c:	701a      	strb	r2, [r3, #0]
      break;
 800399e:	e001      	b.n	80039a4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039a4:	bf00      	nop
  }
}
 80039a6:	bf00      	nop
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d10b      	bne.n	80039fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f004 fa71 	bl	8007ed8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d132      	bne.n	8003a6e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d126      	bne.n	8003a68 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7a5b      	ldrb	r3, [r3, #9]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d113      	bne.n	8003a4a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a2c:	d106      	bne.n	8003a3c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 feff 	bl	8006838 <USB_InitFSLSPClkSel>
 8003a3a:	e011      	b.n	8003a60 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fef8 	bl	8006838 <USB_InitFSLSPClkSel>
 8003a48:	e00a      	b.n	8003a60 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	79db      	ldrb	r3, [r3, #7]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a5e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f004 fa67 	bl	8007f34 <HAL_HCD_PortEnabled_Callback>
 8003a66:	e002      	b.n	8003a6e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f004 fa71 	bl	8007f50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d103      	bne.n	8003a80 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
 8003a7e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e12b      	b.n	8003cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd f96a 	bl	8000d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af8:	f001 f964 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 8003afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4a81      	ldr	r2, [pc, #516]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d807      	bhi.n	8003b18 <HAL_I2C_Init+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a80      	ldr	r2, [pc, #512]	; (8003d0c <HAL_I2C_Init+0x278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e006      	b.n	8003b26 <HAL_I2C_Init+0x92>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a7d      	ldr	r2, [pc, #500]	; (8003d10 <HAL_I2C_Init+0x27c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	bf94      	ite	ls
 8003b20:	2301      	movls	r3, #1
 8003b22:	2300      	movhi	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0e7      	b.n	8003cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a78      	ldr	r2, [pc, #480]	; (8003d14 <HAL_I2C_Init+0x280>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0c9b      	lsrs	r3, r3, #18
 8003b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d802      	bhi.n	8003b68 <HAL_I2C_Init+0xd4>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3301      	adds	r3, #1
 8003b66:	e009      	b.n	8003b7c <HAL_I2C_Init+0xe8>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_I2C_Init+0x284>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	495c      	ldr	r1, [pc, #368]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d819      	bhi.n	8003bd0 <HAL_I2C_Init+0x13c>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e59      	subs	r1, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003baa:	1c59      	adds	r1, r3, #1
 8003bac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_I2C_Init+0x138>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1e59      	subs	r1, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bca:	e051      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	e04f      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d111      	bne.n	8003bfc <HAL_I2C_Init+0x168>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e012      	b.n	8003c22 <HAL_I2C_Init+0x18e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e58      	subs	r0, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x196>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10e      	bne.n	8003c50 <HAL_I2C_Init+0x1bc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e58      	subs	r0, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Init+0x1dc>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1e58      	subs	r0, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	0099      	lsls	r1, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	6809      	ldr	r1, [r1, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6911      	ldr	r1, [r2, #16]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	000186a0 	.word	0x000186a0
 8003d0c:	001e847f 	.word	0x001e847f
 8003d10:	003d08ff 	.word	0x003d08ff
 8003d14:	431bde83 	.word	0x431bde83
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d129      	bne.n	8003d86 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2224      	movs	r2, #36	; 0x24
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0210 	bic.w	r2, r2, #16
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d12a      	bne.n	8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	; 0x24
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	f023 030f 	bic.w	r3, r3, #15
 8003dd4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	89fb      	ldrh	r3, [r7, #14]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	89fa      	ldrh	r2, [r7, #14]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0bf      	b.n	8003fa6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd f814 	bl	8000e68 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003e56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_LTDC_Init+0x19c>)
 8003e88:	400b      	ands	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6899      	ldr	r1, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68d9      	ldr	r1, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_LTDC_Init+0x19c>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_LTDC_Init+0x19c>)
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6919      	ldr	r1, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6959      	ldr	r1, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_LTDC_Init+0x19c>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6959      	ldr	r1, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0206 	orr.w	r2, r2, #6
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	f000f800 	.word	0xf000f800

08003fb4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d023      	beq.n	800401e <HAL_LTDC_IRQHandler+0x6a>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01e      	beq.n	800401e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f86f 	bl	80040fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d023      	beq.n	8004070 <HAL_LTDC_IRQHandler+0xbc>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01e      	beq.n	8004070 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0202 	bic.w	r2, r2, #2
 8004040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004050:	f043 0202 	orr.w	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f846 	bl	80040fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01b      	beq.n	80040b2 <HAL_LTDC_IRQHandler+0xfe>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d016      	beq.n	80040b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f82f 	bl	8004110 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_LTDC_IRQHandler+0x140>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0208 	bic.w	r2, r2, #8
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2208      	movs	r2, #8
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f818 	bl	8004124 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004138:	b5b0      	push	{r4, r5, r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_LTDC_ConfigLayer+0x1a>
 800414e:	2302      	movs	r3, #2
 8004150:	e02c      	b.n	80041ac <HAL_LTDC_ConfigLayer+0x74>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2134      	movs	r1, #52	; 0x34
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f811 	bl	80041b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}

080041b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	4413      	add	r3, r2
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	01db      	lsls	r3, r3, #7
 80041e0:	4413      	add	r3, r2
 80041e2:	3384      	adds	r3, #132	; 0x84
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4611      	mov	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	01d2      	lsls	r2, r2, #7
 80041f0:	440a      	add	r2, r1
 80041f2:	3284      	adds	r2, #132	; 0x84
 80041f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800420a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800420c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	440b      	add	r3, r1
 800421a:	3384      	adds	r3, #132	; 0x84
 800421c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004222:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004232:	4413      	add	r3, r2
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	01db      	lsls	r3, r3, #7
 8004242:	4413      	add	r3, r2
 8004244:	3384      	adds	r3, #132	; 0x84
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	4611      	mov	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	01d2      	lsls	r2, r2, #7
 8004252:	440a      	add	r2, r1
 8004254:	3284      	adds	r2, #132	; 0x84
 8004256:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800425a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800426a:	4413      	add	r3, r2
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	440b      	add	r3, r1
 800427a:	3384      	adds	r3, #132	; 0x84
 800427c:	4619      	mov	r1, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	01db      	lsls	r3, r3, #7
 800428e:	4413      	add	r3, r2
 8004290:	3384      	adds	r3, #132	; 0x84
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4611      	mov	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	01d2      	lsls	r2, r2, #7
 800429e:	440a      	add	r2, r1
 80042a0:	3284      	adds	r2, #132	; 0x84
 80042a2:	f023 0307 	bic.w	r3, r3, #7
 80042a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	01db      	lsls	r3, r3, #7
 80042b2:	4413      	add	r3, r2
 80042b4:	3384      	adds	r3, #132	; 0x84
 80042b6:	461a      	mov	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	01db      	lsls	r3, r3, #7
 80042e4:	4413      	add	r3, r2
 80042e6:	3384      	adds	r3, #132	; 0x84
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	01db      	lsls	r3, r3, #7
 80042f4:	4413      	add	r3, r2
 80042f6:	3384      	adds	r3, #132	; 0x84
 80042f8:	461a      	mov	r2, r3
 80042fa:	2300      	movs	r3, #0
 80042fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004304:	461a      	mov	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	431a      	orrs	r2, r3
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	01db      	lsls	r3, r3, #7
 8004318:	440b      	add	r3, r1
 800431a:	3384      	adds	r3, #132	; 0x84
 800431c:	4619      	mov	r1, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	4413      	add	r3, r2
 8004330:	3384      	adds	r3, #132	; 0x84
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	4611      	mov	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	01d2      	lsls	r2, r2, #7
 800433e:	440a      	add	r2, r1
 8004340:	3284      	adds	r2, #132	; 0x84
 8004342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004346:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	01db      	lsls	r3, r3, #7
 8004352:	4413      	add	r3, r2
 8004354:	3384      	adds	r3, #132	; 0x84
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	4413      	add	r3, r2
 800436a:	3384      	adds	r3, #132	; 0x84
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	4611      	mov	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	01d2      	lsls	r2, r2, #7
 8004378:	440a      	add	r2, r1
 800437a:	3284      	adds	r2, #132	; 0x84
 800437c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004380:	f023 0307 	bic.w	r3, r3, #7
 8004384:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	6809      	ldr	r1, [r1, #0]
 8004392:	4608      	mov	r0, r1
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	01c9      	lsls	r1, r1, #7
 8004398:	4401      	add	r1, r0
 800439a:	3184      	adds	r1, #132	; 0x84
 800439c:	4313      	orrs	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	01db      	lsls	r3, r3, #7
 80043aa:	4413      	add	r3, r2
 80043ac:	3384      	adds	r3, #132	; 0x84
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	01db      	lsls	r3, r3, #7
 80043ba:	4413      	add	r3, r2
 80043bc:	3384      	adds	r3, #132	; 0x84
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	01db      	lsls	r3, r3, #7
 80043ce:	4413      	add	r3, r2
 80043d0:	3384      	adds	r3, #132	; 0x84
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80043e2:	2304      	movs	r3, #4
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e01b      	b.n	8004420 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80043f0:	2303      	movs	r3, #3
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e014      	b.n	8004420 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d00b      	beq.n	8004416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004402:	2b02      	cmp	r3, #2
 8004404:	d007      	beq.n	8004416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800440a:	2b03      	cmp	r3, #3
 800440c:	d003      	beq.n	8004416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004412:	2b07      	cmp	r3, #7
 8004414:	d102      	bne.n	800441c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004416:	2302      	movs	r3, #2
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e001      	b.n	8004420 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	01db      	lsls	r3, r3, #7
 800442a:	4413      	add	r3, r2
 800442c:	3384      	adds	r3, #132	; 0x84
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	4611      	mov	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	01d2      	lsls	r2, r2, #7
 800443a:	440a      	add	r2, r1
 800443c:	3284      	adds	r2, #132	; 0x84
 800443e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004442:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1acb      	subs	r3, r1, r3
 800445a:	69f9      	ldr	r1, [r7, #28]
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	6809      	ldr	r1, [r1, #0]
 8004466:	4608      	mov	r0, r1
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	01c9      	lsls	r1, r1, #7
 800446c:	4401      	add	r1, r0
 800446e:	3184      	adds	r1, #132	; 0x84
 8004470:	4313      	orrs	r3, r2
 8004472:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	01db      	lsls	r3, r3, #7
 800447e:	4413      	add	r3, r2
 8004480:	3384      	adds	r3, #132	; 0x84
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	01d2      	lsls	r2, r2, #7
 800448e:	440a      	add	r2, r1
 8004490:	3284      	adds	r2, #132	; 0x84
 8004492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004496:	f023 0307 	bic.w	r3, r3, #7
 800449a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	01db      	lsls	r3, r3, #7
 80044a6:	4413      	add	r3, r2
 80044a8:	3384      	adds	r3, #132	; 0x84
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	01db      	lsls	r3, r3, #7
 80044bc:	4413      	add	r3, r2
 80044be:	3384      	adds	r3, #132	; 0x84
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	4611      	mov	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	01d2      	lsls	r2, r2, #7
 80044cc:	440a      	add	r2, r1
 80044ce:	3284      	adds	r2, #132	; 0x84
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6013      	str	r3, [r2, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3724      	adds	r7, #36	; 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e267      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d075      	beq.n	80045ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004502:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b04      	cmp	r3, #4
 800450c:	d00c      	beq.n	8004528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450e:	4b85      	ldr	r3, [pc, #532]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004516:	2b08      	cmp	r3, #8
 8004518:	d112      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451a:	4b82      	ldr	r3, [pc, #520]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004526:	d10b      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05b      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d157      	bne.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e242      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x74>
 800454a:	4b76      	ldr	r3, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a75      	ldr	r2, [pc, #468]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x98>
 8004562:	4b70      	ldr	r3, [pc, #448]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6f      	ldr	r2, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6c      	ldr	r2, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 800457c:	4b69      	ldr	r3, [pc, #420]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a68      	ldr	r2, [pc, #416]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b66      	ldr	r3, [pc, #408]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a65      	ldr	r2, [pc, #404]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd f80e 	bl	80015bc <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd f80a 	bl	80015bc <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e207      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	4b5b      	ldr	r3, [pc, #364]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fc fffa 	bl	80015bc <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fc fff6 	bl	80015bc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1f3      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	4b51      	ldr	r3, [pc, #324]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800460e:	2b08      	cmp	r3, #8
 8004610:	d11c      	bne.n	800464c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b44      	ldr	r3, [pc, #272]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_RCC_OscConfig+0x152>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1c7      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4937      	ldr	r1, [pc, #220]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	e03a      	b.n	80046c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004654:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCC_OscConfig+0x244>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fc ffaf 	bl	80015bc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004662:	f7fc ffab 	bl	80015bc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1a8      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x244>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fc ff8e 	bl	80015bc <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fc ff8a 	bl	80015bc <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e187      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d036      	beq.n	800473c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d016      	beq.n	8004704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_RCC_OscConfig+0x248>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fc ff6e 	bl	80015bc <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fc ff6a 	bl	80015bc <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e167      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_OscConfig+0x240>)
 80046f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x200>
 8004702:	e01b      	b.n	800473c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_OscConfig+0x248>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470a:	f7fc ff57 	bl	80015bc <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00e      	b.n	8004730 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004712:	f7fc ff53 	bl	80015bc <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d907      	bls.n	8004730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e150      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
 8004724:	40023800 	.word	0x40023800
 8004728:	42470000 	.word	0x42470000
 800472c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ea      	bne.n	8004712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8097 	beq.w	8004878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b81      	ldr	r3, [pc, #516]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a7c      	ldr	r2, [pc, #496]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b7a      	ldr	r3, [pc, #488]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b77      	ldr	r3, [pc, #476]	; (8004958 <HAL_RCC_OscConfig+0x474>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b74      	ldr	r3, [pc, #464]	; (8004958 <HAL_RCC_OscConfig+0x474>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a73      	ldr	r2, [pc, #460]	; (8004958 <HAL_RCC_OscConfig+0x474>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fc ff13 	bl	80015bc <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fc ff0f 	bl	80015bc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e10c      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_OscConfig+0x474>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x2ea>
 80047c0:	4b64      	ldr	r3, [pc, #400]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a63      	ldr	r2, [pc, #396]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
 80047cc:	e01c      	b.n	8004808 <HAL_RCC_OscConfig+0x324>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x30c>
 80047d6:	4b5f      	ldr	r3, [pc, #380]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a5e      	ldr	r2, [pc, #376]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a5b      	ldr	r2, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0x324>
 80047f0:	4b58      	ldr	r3, [pc, #352]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a57      	ldr	r2, [pc, #348]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a54      	ldr	r2, [pc, #336]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 0304 	bic.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d015      	beq.n	800483c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc fed4 	bl	80015bc <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fc fed0 	bl	80015bc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0cb      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	4b49      	ldr	r3, [pc, #292]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ee      	beq.n	8004818 <HAL_RCC_OscConfig+0x334>
 800483a:	e014      	b.n	8004866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7fc febe 	bl	80015bc <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc feba 	bl	80015bc <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0b5      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ee      	bne.n	8004844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	4a38      	ldr	r2, [pc, #224]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a1 	beq.w	80049c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004882:	4b34      	ldr	r3, [pc, #208]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b08      	cmp	r3, #8
 800488c:	d05c      	beq.n	8004948 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d141      	bne.n	800491a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <HAL_RCC_OscConfig+0x478>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fc fe8e 	bl	80015bc <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fc fe8a 	bl	80015bc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e087      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	491b      	ldr	r1, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x478>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fe63 	bl	80015bc <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fc fe5f 	bl	80015bc <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e05c      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x416>
 8004918:	e054      	b.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_RCC_OscConfig+0x478>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fc fe4c 	bl	80015bc <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004928:	f7fc fe48 	bl	80015bc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e045      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCC_OscConfig+0x470>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x444>
 8004946:	e03d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e038      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000
 800495c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x4ec>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d028      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d121      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d11a      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004998:	4293      	cmp	r3, r2
 800499a:	d111      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0cc      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049e8:	4b68      	ldr	r3, [pc, #416]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d90c      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b63      	ldr	r3, [pc, #396]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0b8      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a28:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4a58      	ldr	r2, [pc, #352]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a40:	4b53      	ldr	r3, [pc, #332]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a52      	ldr	r2, [pc, #328]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	494d      	ldr	r1, [pc, #308]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d044      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e07f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e067      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 0203 	bic.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4934      	ldr	r1, [pc, #208]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7fc fd7a 	bl	80015bc <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004acc:	f7fc fd76 	bl	80015bc <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e04f      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 020c 	and.w	r2, r3, #12
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1eb      	bne.n	8004acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d20c      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e032      	b.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4916      	ldr	r1, [pc, #88]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b46:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	490e      	ldr	r1, [pc, #56]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5a:	f000 f821 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	490a      	ldr	r1, [pc, #40]	; (8004b94 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	5ccb      	ldrb	r3, [r1, r3]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fbf2 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023c00 	.word	0x40023c00
 8004b90:	40023800 	.word	0x40023800
 8004b94:	08008098 	.word	0x08008098
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	20000004 	.word	0x20000004

08004ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b094      	sub	sp, #80	; 0x50
 8004ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
 8004bac:	2300      	movs	r3, #0
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb8:	4b79      	ldr	r3, [pc, #484]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d00d      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	f200 80e1 	bhi.w	8004d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x3a>
 8004bd2:	e0db      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b73      	ldr	r3, [pc, #460]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bd8:	e0db      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bda:	4b73      	ldr	r3, [pc, #460]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bde:	e0d8      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be0:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bea:	4b6d      	ldr	r3, [pc, #436]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d063      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c24:	0150      	lsls	r0, r2, #5
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	1a51      	subs	r1, r2, r1
 8004c2e:	6139      	str	r1, [r7, #16]
 8004c30:	4629      	mov	r1, r5
 8004c32:	eb63 0301 	sbc.w	r3, r3, r1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c44:	4659      	mov	r1, fp
 8004c46:	018b      	lsls	r3, r1, #6
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4e:	4651      	mov	r1, sl
 8004c50:	018a      	lsls	r2, r1, #6
 8004c52:	4651      	mov	r1, sl
 8004c54:	ebb2 0801 	subs.w	r8, r2, r1
 8004c58:	4659      	mov	r1, fp
 8004c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	462b      	mov	r3, r5
 8004c80:	eb49 0303 	adc.w	r3, r9, r3
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c92:	4629      	mov	r1, r5
 8004c94:	024b      	lsls	r3, r1, #9
 8004c96:	4621      	mov	r1, r4
 8004c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	024a      	lsls	r2, r1, #9
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb0:	f7fb faa6 	bl	8000200 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	e058      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	0159      	lsls	r1, r3, #5
 8004ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cea:	0150      	lsls	r0, r2, #5
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d10:	ebb2 040a 	subs.w	r4, r2, sl
 8004d14:	eb63 050b 	sbc.w	r5, r3, fp
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	00eb      	lsls	r3, r5, #3
 8004d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d26:	00e2      	lsls	r2, r4, #3
 8004d28:	4614      	mov	r4, r2
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	18e3      	adds	r3, r4, r3
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	464b      	mov	r3, r9
 8004d34:	eb45 0303 	adc.w	r3, r5, r3
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d46:	4629      	mov	r1, r5
 8004d48:	028b      	lsls	r3, r1, #10
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d50:	4621      	mov	r1, r4
 8004d52:	028a      	lsls	r2, r1, #10
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	61fa      	str	r2, [r7, #28]
 8004d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d64:	f7fb fa4c 	bl	8000200 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3750      	adds	r7, #80	; 0x50
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	00f42400 	.word	0x00f42400
 8004da8:	007a1200 	.word	0x007a1200

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000000 	.word	0x20000000

08004dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	080080a8 	.word	0x080080a8

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004df0:	f7ff ffdc 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0b5b      	lsrs	r3, r3, #13
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	080080a8 	.word	0x080080a8

08004e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	220f      	movs	r2, #15
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0203 	and.w	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e56:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <HAL_RCC_GetClockConfig+0x60>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40023c00 	.word	0x40023c00

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d075      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eac:	4b91      	ldr	r3, [pc, #580]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb2:	f7fc fb83 	bl	80015bc <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eba:	f7fc fb7f 	bl	80015bc <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e189      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ecc:	4b8a      	ldr	r3, [pc, #552]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	019a      	lsls	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4981      	ldr	r1, [pc, #516]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01f      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f04:	4b7c      	ldr	r3, [pc, #496]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0a:	0f1b      	lsrs	r3, r3, #28
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	019a      	lsls	r2, r3, #6
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	071b      	lsls	r3, r3, #28
 8004f24:	4974      	ldr	r1, [pc, #464]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f32:	f023 021f 	bic.w	r2, r3, #31
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	496e      	ldr	r1, [pc, #440]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	019a      	lsls	r2, r3, #6
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	071b      	lsls	r3, r3, #28
 8004f64:	4964      	ldr	r1, [pc, #400]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f6c:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fc fb23 	bl	80015bc <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f7a:	f7fc fb1f 	bl	80015bc <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e129      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d079      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fb0:	4b52      	ldr	r3, [pc, #328]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fc fb01 	bl	80015bc <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fbe:	f7fc fafd 	bl	80015bc <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e107      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fd0:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fdc:	d0ef      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d020      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	0f1b      	lsrs	r3, r3, #28
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	019a      	lsls	r2, r3, #6
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	431a      	orrs	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	493b      	ldr	r1, [pc, #236]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005012:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	3b01      	subs	r3, #1
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	4934      	ldr	r1, [pc, #208]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005038:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	071b      	lsls	r3, r3, #28
 8005058:	4927      	ldr	r1, [pc, #156]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	4922      	ldr	r1, [pc, #136]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507c:	f7fc fa9e 	bl	80015bc <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005084:	f7fc fa9a 	bl	80015bc <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0a4      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a2:	d1ef      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 808b 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6413      	str	r3, [r2, #64]	; 0x40
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050da:	f7fc fa6f 	bl	80015bc <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050e0:	e010      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fc fa6b 	bl	80015bc <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d909      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e075      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050f4:	42470068 	.word	0x42470068
 80050f8:	40023800 	.word	0x40023800
 80050fc:	42470070 	.word	0x42470070
 8005100:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005104:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0e8      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005110:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02f      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d028      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800512e:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005138:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513e:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d114      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005156:	f7fc fa31 	bl	80015bc <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fc fa2d 	bl	80015bc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e035      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ee      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518c:	d10d      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800519e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a2:	4912      	ldr	r1, [pc, #72]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	e005      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051b4:	6093      	str	r3, [r2, #8]
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80051dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40007000 	.word	0x40007000
 80051ec:	40023800 	.word	0x40023800
 80051f0:	42470e40 	.word	0x42470e40
 80051f4:	424711e0 	.word	0x424711e0

080051f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e025      	b.n	8005258 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc f895 	bl	8001350 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f001 f91b 	bl	8006474 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	f001 f970 	bl	800652e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07b      	b.n	800536a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005282:	d009      	beq.n	8005298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e005      	b.n	8005298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb ff08 	bl	80010c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0104 	and.w	r1, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0210 	and.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e041      	b.n	8005408 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fb fedd 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f000 fa7d 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d001      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e04e      	b.n	80054c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d022      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d01d      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d018      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_TIM_Base_Start_IT+0xdc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d111      	bne.n	80054b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d010      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	e007      	b.n	80054c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0202 	mvn.w	r2, #2
 8005524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f999 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f98b 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f99c 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0204 	mvn.w	r2, #4
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f973 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f965 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f976 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0208 	mvn.w	r2, #8
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f94d 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f93f 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f950 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0210 	mvn.w	r2, #16
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2208      	movs	r2, #8
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f927 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f919 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f92a 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0201 	mvn.w	r2, #1
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb fb0e 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00c      	beq.n	8005680 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fae4 	bl	8005c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8fb 	bl	800589a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0220 	mvn.w	r2, #32
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fab6 	bl	8005c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_TIM_ConfigClockSource+0x1c>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0b4      	b.n	8005856 <HAL_TIM_ConfigClockSource+0x186>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005724:	d03e      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	f200 8087 	bhi.w	800583c <HAL_TIM_ConfigClockSource+0x16c>
 800572e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005732:	f000 8086 	beq.w	8005842 <HAL_TIM_ConfigClockSource+0x172>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d87f      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d01a      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0xa6>
 8005740:	2b70      	cmp	r3, #112	; 0x70
 8005742:	d87b      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b60      	cmp	r3, #96	; 0x60
 8005746:	d050      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x11a>
 8005748:	2b60      	cmp	r3, #96	; 0x60
 800574a:	d877      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b50      	cmp	r3, #80	; 0x50
 800574e:	d03c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xfa>
 8005750:	2b50      	cmp	r3, #80	; 0x50
 8005752:	d873      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d058      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x13a>
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d86f      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d064      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15a>
 8005760:	2b30      	cmp	r3, #48	; 0x30
 8005762:	d86b      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d060      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d867      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05c      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	2b10      	cmp	r3, #16
 8005772:	d05a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15a>
 8005774:	e062      	b.n	800583c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005786:	f000 f9b9 	bl	8005afc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	609a      	str	r2, [r3, #8]
      break;
 80057a2:	e04f      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b4:	f000 f9a2 	bl	8005afc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c6:	609a      	str	r2, [r3, #8]
      break;
 80057c8:	e03c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 f916 	bl	8005a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2150      	movs	r1, #80	; 0x50
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f96f 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e02c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 f935 	bl	8005a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2160      	movs	r1, #96	; 0x60
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f95f 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 8005808:	e01c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	461a      	mov	r2, r3
 8005818:	f000 f8f6 	bl	8005a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f94f 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 8005828:	e00c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f000 f946 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 800583a:	e003      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e000      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a46      	ldr	r2, [pc, #280]	; (80059dc <TIM_Base_SetConfig+0x12c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d00f      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a43      	ldr	r2, [pc, #268]	; (80059e0 <TIM_Base_SetConfig+0x130>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a42      	ldr	r2, [pc, #264]	; (80059e4 <TIM_Base_SetConfig+0x134>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a41      	ldr	r2, [pc, #260]	; (80059e8 <TIM_Base_SetConfig+0x138>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a40      	ldr	r2, [pc, #256]	; (80059ec <TIM_Base_SetConfig+0x13c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a35      	ldr	r2, [pc, #212]	; (80059dc <TIM_Base_SetConfig+0x12c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d027      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a32      	ldr	r2, [pc, #200]	; (80059e0 <TIM_Base_SetConfig+0x130>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d023      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a31      	ldr	r2, [pc, #196]	; (80059e4 <TIM_Base_SetConfig+0x134>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01f      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a30      	ldr	r2, [pc, #192]	; (80059e8 <TIM_Base_SetConfig+0x138>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <TIM_Base_SetConfig+0x13c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d017      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2e      	ldr	r2, [pc, #184]	; (80059f0 <TIM_Base_SetConfig+0x140>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <TIM_Base_SetConfig+0x144>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <TIM_Base_SetConfig+0x148>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <TIM_Base_SetConfig+0x14c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <TIM_Base_SetConfig+0x150>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <TIM_Base_SetConfig+0x154>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	; (80059dc <TIM_Base_SetConfig+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <TIM_Base_SetConfig+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]
  }
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	40001800 	.word	0x40001800
 8005a00:	40001c00 	.word	0x40001c00
 8005a04:	40002000 	.word	0x40002000

08005a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 030a 	bic.w	r3, r3, #10
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f023 0210 	bic.w	r2, r3, #16
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f043 0307 	orr.w	r3, r3, #7
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e05a      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a21      	ldr	r2, [pc, #132]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40001800 	.word	0x40001800

08005c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e042      	b.n	8005cf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fa8a 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f973 	bl	8005f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d175      	bne.n	8005e08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Transmit+0x2c>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e06e      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3a:	f7fb fc3f 	bl	80015bc <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	88fa      	ldrh	r2, [r7, #6]
 8005d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d70:	e02e      	b.n	8005dd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f848 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e03a      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3302      	adds	r3, #2
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	e007      	b.n	8005dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1cb      	bne.n	8005d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2140      	movs	r1, #64	; 0x40
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f814 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e006      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	e03b      	b.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d037      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2c:	f7fb fbc6 	bl	80015bc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e03a      	b.n	8005ebc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d023      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d020      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d01d      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d116      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f81d 	bl	8005ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e00f      	b.n	8005ebc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d0b4      	beq.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b095      	sub	sp, #84	; 0x54
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eec:	643a      	str	r2, [r7, #64]	; 0x40
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e5      	bne.n	8005ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d119      	bne.n	8005f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	647b      	str	r3, [r7, #68]	; 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	61ba      	str	r2, [r7, #24]
 8005f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6979      	ldr	r1, [r7, #20]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f7e:	bf00      	nop
 8005f80:	3754      	adds	r7, #84	; 0x54
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f90:	b0c0      	sub	sp, #256	; 0x100
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	ea40 0301 	orr.w	r3, r0, r1
 8005fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fe4:	f021 010c 	bic.w	r1, r1, #12
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	6999      	ldr	r1, [r3, #24]
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	ea40 0301 	orr.w	r3, r0, r1
 8006012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8f      	ldr	r3, [pc, #572]	; (8006258 <UART_SetConfig+0x2cc>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d005      	beq.n	800602c <UART_SetConfig+0xa0>
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8d      	ldr	r3, [pc, #564]	; (800625c <UART_SetConfig+0x2d0>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fe fede 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 8006030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006034:	e003      	b.n	800603e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fe fec5 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 800603a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	f040 810c 	bne.w	8006264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800604c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006050:	2200      	movs	r2, #0
 8006052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800605a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	1891      	adds	r1, r2, r2
 8006064:	65b9      	str	r1, [r7, #88]	; 0x58
 8006066:	415b      	adcs	r3, r3
 8006068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800606a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800606e:	4621      	mov	r1, r4
 8006070:	eb12 0801 	adds.w	r8, r2, r1
 8006074:	4629      	mov	r1, r5
 8006076:	eb43 0901 	adc.w	r9, r3, r1
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608e:	4690      	mov	r8, r2
 8006090:	4699      	mov	r9, r3
 8006092:	4623      	mov	r3, r4
 8006094:	eb18 0303 	adds.w	r3, r8, r3
 8006098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800609c:	462b      	mov	r3, r5
 800609e:	eb49 0303 	adc.w	r3, r9, r3
 80060a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ba:	460b      	mov	r3, r1
 80060bc:	18db      	adds	r3, r3, r3
 80060be:	653b      	str	r3, [r7, #80]	; 0x50
 80060c0:	4613      	mov	r3, r2
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	657b      	str	r3, [r7, #84]	; 0x54
 80060c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060d0:	f7fa f896 	bl	8000200 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b61      	ldr	r3, [pc, #388]	; (8006260 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011c      	lsls	r4, r3, #4
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80060fc:	415b      	adcs	r3, r3
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006104:	4641      	mov	r1, r8
 8006106:	eb12 0a01 	adds.w	sl, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0b01 	adc.w	fp, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800611c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006124:	4692      	mov	sl, r2
 8006126:	469b      	mov	fp, r3
 8006128:	4643      	mov	r3, r8
 800612a:	eb1a 0303 	adds.w	r3, sl, r3
 800612e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006132:	464b      	mov	r3, r9
 8006134:	eb4b 0303 	adc.w	r3, fp, r3
 8006138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800614c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006150:	460b      	mov	r3, r1
 8006152:	18db      	adds	r3, r3, r3
 8006154:	643b      	str	r3, [r7, #64]	; 0x40
 8006156:	4613      	mov	r3, r2
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	647b      	str	r3, [r7, #68]	; 0x44
 800615e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006166:	f7fa f84b 	bl	8000200 <__aeabi_uldivmod>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4611      	mov	r1, r2
 8006170:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2301 	umull	r2, r3, r3, r1
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2264      	movs	r2, #100	; 0x64
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <UART_SetConfig+0x2d4>)
 8006188:	fba3 2302 	umull	r2, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006194:	441c      	add	r4, r3
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80061b0:	415b      	adcs	r3, r3
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b8:	4641      	mov	r1, r8
 80061ba:	1851      	adds	r1, r2, r1
 80061bc:	6339      	str	r1, [r7, #48]	; 0x30
 80061be:	4649      	mov	r1, r9
 80061c0:	414b      	adcs	r3, r1
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061d0:	4659      	mov	r1, fp
 80061d2:	00cb      	lsls	r3, r1, #3
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061da:	4651      	mov	r1, sl
 80061dc:	00ca      	lsls	r2, r1, #3
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	4642      	mov	r2, r8
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ec:	464b      	mov	r3, r9
 80061ee:	460a      	mov	r2, r1
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800620c:	460b      	mov	r3, r1
 800620e:	18db      	adds	r3, r3, r3
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
 8006212:	4613      	mov	r3, r2
 8006214:	eb42 0303 	adc.w	r3, r2, r3
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006222:	f7f9 ffed 	bl	8000200 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <UART_SetConfig+0x2d4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a08      	ldr	r2, [pc, #32]	; (8006260 <UART_SetConfig+0x2d4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4422      	add	r2, r4
 8006252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006254:	e106      	b.n	8006464 <UART_SetConfig+0x4d8>
 8006256:	bf00      	nop
 8006258:	40011000 	.word	0x40011000
 800625c:	40011400 	.word	0x40011400
 8006260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	6239      	str	r1, [r7, #32]
 800627e:	415b      	adcs	r3, r3
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006286:	4641      	mov	r1, r8
 8006288:	1854      	adds	r4, r2, r1
 800628a:	4649      	mov	r1, r9
 800628c:	eb43 0501 	adc.w	r5, r3, r1
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00eb      	lsls	r3, r5, #3
 800629a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629e:	00e2      	lsls	r2, r4, #3
 80062a0:	4614      	mov	r4, r2
 80062a2:	461d      	mov	r5, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	18e3      	adds	r3, r4, r3
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062ac:	464b      	mov	r3, r9
 80062ae:	eb45 0303 	adc.w	r3, r5, r3
 80062b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062d2:	4629      	mov	r1, r5
 80062d4:	008b      	lsls	r3, r1, #2
 80062d6:	4621      	mov	r1, r4
 80062d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062dc:	4621      	mov	r1, r4
 80062de:	008a      	lsls	r2, r1, #2
 80062e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062e4:	f7f9 ff8c 	bl	8000200 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b60      	ldr	r3, [pc, #384]	; (8006470 <UART_SetConfig+0x4e4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	61b9      	str	r1, [r7, #24]
 8006310:	415b      	adcs	r3, r3
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6139      	str	r1, [r7, #16]
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800634c:	464b      	mov	r3, r9
 800634e:	460a      	mov	r2, r1
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	67bb      	str	r3, [r7, #120]	; 0x78
 8006362:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006370:	4649      	mov	r1, r9
 8006372:	008b      	lsls	r3, r1, #2
 8006374:	4641      	mov	r1, r8
 8006376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800637a:	4641      	mov	r1, r8
 800637c:	008a      	lsls	r2, r1, #2
 800637e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006382:	f7f9 ff3d 	bl	8000200 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4611      	mov	r1, r2
 800638c:	4b38      	ldr	r3, [pc, #224]	; (8006470 <UART_SetConfig+0x4e4>)
 800638e:	fba3 2301 	umull	r2, r3, r3, r1
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2264      	movs	r2, #100	; 0x64
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	1acb      	subs	r3, r1, r3
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	3332      	adds	r3, #50	; 0x32
 80063a0:	4a33      	ldr	r2, [pc, #204]	; (8006470 <UART_SetConfig+0x4e4>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ac:	441c      	add	r4, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	673b      	str	r3, [r7, #112]	; 0x70
 80063b6:	677a      	str	r2, [r7, #116]	; 0x74
 80063b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	415b      	adcs	r3, r3
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063fe:	464b      	mov	r3, r9
 8006400:	460a      	mov	r2, r1
 8006402:	eb42 0303 	adc.w	r3, r2, r3
 8006406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	663b      	str	r3, [r7, #96]	; 0x60
 8006412:	667a      	str	r2, [r7, #100]	; 0x64
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006432:	f7f9 fee5 	bl	8000200 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <UART_SetConfig+0x4e4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	; 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	3332      	adds	r3, #50	; 0x32
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <UART_SetConfig+0x4e4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 020f 	and.w	r2, r3, #15
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4422      	add	r2, r4
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800646a:	46bd      	mov	sp, r7
 800646c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006470:	51eb851f 	.word	0x51eb851f

08006474 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d123      	bne.n	80064ce <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800648e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6851      	ldr	r1, [r2, #4]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	6892      	ldr	r2, [r2, #8]
 800649a:	4311      	orrs	r1, r2
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	68d2      	ldr	r2, [r2, #12]
 80064a0:	4311      	orrs	r1, r2
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	6912      	ldr	r2, [r2, #16]
 80064a6:	4311      	orrs	r1, r2
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	6952      	ldr	r2, [r2, #20]
 80064ac:	4311      	orrs	r1, r2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	6992      	ldr	r2, [r2, #24]
 80064b2:	4311      	orrs	r1, r2
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	69d2      	ldr	r2, [r2, #28]
 80064b8:	4311      	orrs	r1, r2
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	6a12      	ldr	r2, [r2, #32]
 80064be:	4311      	orrs	r1, r2
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064c4:	430a      	orrs	r2, r1
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e028      	b.n	8006520 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	69d9      	ldr	r1, [r3, #28]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4319      	orrs	r1, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	430b      	orrs	r3, r1
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	6851      	ldr	r1, [r2, #4]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	6892      	ldr	r2, [r2, #8]
 8006500:	4311      	orrs	r1, r2
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	4311      	orrs	r1, r2
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	6912      	ldr	r2, [r2, #16]
 800650c:	4311      	orrs	r1, r2
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	6952      	ldr	r2, [r2, #20]
 8006512:	4311      	orrs	r1, r2
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	6992      	ldr	r2, [r2, #24]
 8006518:	430a      	orrs	r2, r1
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d128      	bne.n	8006592 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1e59      	subs	r1, r3, #1
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	3b01      	subs	r3, #1
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4319      	orrs	r1, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	3b01      	subs	r3, #1
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	4319      	orrs	r1, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	4319      	orrs	r1, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	3b01      	subs	r3, #1
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	4319      	orrs	r1, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	3b01      	subs	r3, #1
 800657c:	051b      	lsls	r3, r3, #20
 800657e:	4319      	orrs	r1, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	3b01      	subs	r3, #1
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	430b      	orrs	r3, r1
 800658a:	431a      	orrs	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
 8006590:	e02f      	b.n	80065f2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800659a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	3a01      	subs	r2, #1
 80065a4:	0311      	lsls	r1, r2, #12
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	6952      	ldr	r2, [r2, #20]
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0512      	lsls	r2, r2, #20
 80065ae:	430a      	orrs	r2, r1
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1e59      	subs	r1, r3, #1
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4319      	orrs	r1, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	4319      	orrs	r1, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	3b01      	subs	r3, #1
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	4319      	orrs	r1, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	430b      	orrs	r3, r1
 80065ec:	431a      	orrs	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f023 0201 	bic.w	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800665e:	d901      	bls.n	8006664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e01b      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	daf2      	bge.n	8006652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	019b      	lsls	r3, r3, #6
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006688:	d901      	bls.n	800668e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e006      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b20      	cmp	r3, #32
 8006698:	d0f0      	beq.n	800667c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066c0:	d901      	bls.n	80066c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e018      	b.n	80066f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	daf2      	bge.n	80066b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2210      	movs	r2, #16
 80066d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066e4:	d901      	bls.n	80066ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e006      	b.n	80066f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d0f0      	beq.n	80066d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006704:	b480      	push	{r7}
 8006706:	b08b      	sub	sp, #44	; 0x2c
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	089b      	lsrs	r3, r3, #2
 800671e:	b29b      	uxth	r3, r3
 8006720:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	e014      	b.n	800675a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	601a      	str	r2, [r3, #0]
    pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	3301      	adds	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	3301      	adds	r3, #1
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	3301      	adds	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	3301      	adds	r3, #1
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	429a      	cmp	r2, r3
 8006760:	d3e6      	bcc.n	8006730 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006762:	8bfb      	ldrh	r3, [r7, #30]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01e      	beq.n	80067a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006772:	461a      	mov	r2, r3
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	b2da      	uxtb	r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	701a      	strb	r2, [r3, #0]
      i++;
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	3301      	adds	r3, #1
 8006792:	623b      	str	r3, [r7, #32]
      pDest++;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	3301      	adds	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800679a:	8bfb      	ldrh	r3, [r7, #30]
 800679c:	3b01      	subs	r3, #1
 800679e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067a0:	8bfb      	ldrh	r3, [r7, #30]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1ea      	bne.n	800677c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	372c      	adds	r7, #44	; 0x2c
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800680e:	68bb      	ldr	r3, [r7, #8]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f003 0301 	and.w	r3, r3, #1
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006870:	4313      	orrs	r3, r2
 8006872:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d107      	bne.n	800688a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006880:	461a      	mov	r2, r3
 8006882:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006886:	6053      	str	r3, [r2, #4]
 8006888:	e00c      	b.n	80068a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d107      	bne.n	80068a0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	461a      	mov	r2, r3
 8006898:	f241 7370 	movw	r3, #6000	; 0x1770
 800689c:	6053      	str	r3, [r2, #4]
 800689e:	e001      	b.n	80068a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	b29b      	uxth	r3, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	0c9b      	lsrs	r3, r3, #18
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	0fdb      	lsrs	r3, r3, #31
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	0fdb      	lsrs	r3, r3, #31
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	d10d      	bne.n	8006956 <USB_HC_Halt+0x82>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <USB_HC_Halt+0x82>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d002      	beq.n	8006952 <USB_HC_Halt+0x7e>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b03      	cmp	r3, #3
 8006950:	d101      	bne.n	8006956 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e0d8      	b.n	8006b08 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <USB_HC_Halt+0x8e>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d173      	bne.n	8006a4a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006980:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d14a      	bne.n	8006a24 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d133      	bne.n	8006a02 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3301      	adds	r3, #1
 80069de:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e6:	d82e      	bhi.n	8006a46 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fe:	d0ec      	beq.n	80069da <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a00:	e081      	b.n	8006b06 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a22:	e070      	b.n	8006b06 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a44:	e05f      	b.n	8006b06 <USB_HC_Halt+0x232>
            break;
 8006a46:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a48:	e05d      	b.n	8006b06 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a68:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d133      	bne.n	8006ae2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac6:	d81d      	bhi.n	8006b04 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ade:	d0ec      	beq.n	8006aba <USB_HC_Halt+0x1e6>
 8006ae0:	e011      	b.n	8006b06 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e000      	b.n	8006b06 <USB_HC_Halt+0x232>
          break;
 8006b04:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3724      	adds	r7, #36	; 0x24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fd7a 	bl	8006622 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b2e:	2110      	movs	r1, #16
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fd87 	bl	8006644 <USB_FlushTxFifo>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff fdb1 	bl	80066a8 <USB_FlushRxFifo>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e01f      	b.n	8006b96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	3301      	adds	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b0f      	cmp	r3, #15
 8006b9a:	d9dc      	bls.n	8006b56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e034      	b.n	8006c0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be8:	d80c      	bhi.n	8006c04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c00:	d0ec      	beq.n	8006bdc <USB_StopHost+0xc8>
 8006c02:	e000      	b.n	8006c06 <USB_StopHost+0xf2>
        break;
 8006c04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b0f      	cmp	r3, #15
 8006c10:	d9c7      	bls.n	8006ba2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fce9 	bl	8006600 <USB_EnableGlobalInt>

  return ret;
 8006c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f804 	bl	8006c5c <USBH_HandleSof>
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b0b      	cmp	r3, #11
 8006c6c:	d10a      	bne.n	8006c84 <USBH_HandleSof+0x28>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f000 f8ae 	bl	8006e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006cb8:	bf00      	nop
}
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006cd0:	bf00      	nop
}
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d10:	2200      	movs	r2, #0
 8006d12:	4619      	mov	r1, r3
 8006d14:	f000 f87e 	bl	8006e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 f912 	bl	8007f6c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	791b      	ldrb	r3, [r3, #4]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f830 	bl	8006db4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	795b      	ldrb	r3, [r3, #5]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f82a 	bl	8006db4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006d74:	2200      	movs	r2, #0
 8006d76:	4619      	mov	r1, r3
 8006d78:	f000 f84c 	bl	8006e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006da2:	2200      	movs	r2, #0
 8006da4:	4619      	mov	r1, r3
 8006da6:	f000 f835 	bl	8006e14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d80d      	bhi.n	8006de2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	33e0      	adds	r3, #224	; 0xe0
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	33e0      	adds	r3, #224	; 0xe0
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df6:	f3ef 8305 	mrs	r3, IPSR
 8006dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8006dfc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <osMessagePut+0x1e>
    ticks = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006e32:	f7ff ffdd 	bl	8006df0 <inHandlerMode>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d018      	beq.n	8006e6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006e3c:	f107 0210 	add.w	r2, r7, #16
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	2300      	movs	r3, #0
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f9aa 	bl	80071a0 <xQueueGenericSendFromISR>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d001      	beq.n	8006e56 <osMessagePut+0x42>
      return osErrorOS;
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	e018      	b.n	8006e88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d014      	beq.n	8006e86 <osMessagePut+0x72>
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <osMessagePut+0x7c>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	e00b      	b.n	8006e86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006e6e:	f107 0108 	add.w	r1, r7, #8
 8006e72:	2300      	movs	r3, #0
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f894 	bl	8006fa4 <xQueueGenericSend>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d001      	beq.n	8006e86 <osMessagePut+0x72>
      return osErrorOS;
 8006e82:	23ff      	movs	r3, #255	; 0xff
 8006e84:	e000      	b.n	8006e88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d103      	bne.n	8006efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e00c      	b.n	8006f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3308      	adds	r3, #8
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e002      	b.n	8006f0a <vListInsert+0x2e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d2f6      	bcs.n	8006f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6892      	ldr	r2, [r2, #8]
 8006f64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d103      	bne.n	8006f82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	; 0x38
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <xQueueGenericSend+0x40>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <xQueueGenericSend+0x44>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <xQueueGenericSend+0x46>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <xQueueGenericSend+0x60>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x6e>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <xQueueGenericSend+0x72>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueGenericSend+0x74>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <xQueueGenericSend+0x8e>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	623b      	str	r3, [r7, #32]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007032:	f000 fd31 	bl	8007a98 <xTaskGetSchedulerState>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <xQueueGenericSend+0x9e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <xQueueGenericSend+0xa2>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <xQueueGenericSend+0xa4>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xQueueGenericSend+0xbe>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61fb      	str	r3, [r7, #28]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007062:	f000 fe39 	bl	8007cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <xQueueGenericSend+0xd4>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d129      	bne.n	80070cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800707e:	f000 f92a 	bl	80072d6 <prvCopyDataToQueue>
 8007082:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fbfb 	bl	800788c <xTaskRemoveFromEventList>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800709c:	4b3f      	ldr	r3, [pc, #252]	; (800719c <xQueueGenericSend+0x1f8>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	e00a      	b.n	80070c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070b4:	4b39      	ldr	r3, [pc, #228]	; (800719c <xQueueGenericSend+0x1f8>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070c4:	f000 fe38 	bl	8007d38 <vPortExitCritical>
				return pdPASS;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e063      	b.n	8007194 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070d2:	f000 fe31 	bl	8007d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e05c      	b.n	8007194 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fc33 	bl	8007950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ee:	f000 fe23 	bl	8007d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070f2:	f000 f9c5 	bl	8007480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070f6:	f000 fdef 	bl	8007cd8 <vPortEnterCritical>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007100:	b25b      	sxtb	r3, r3
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d103      	bne.n	8007110 <xQueueGenericSend+0x16c>
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007116:	b25b      	sxtb	r3, r3
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d103      	bne.n	8007126 <xQueueGenericSend+0x182>
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007126:	f000 fe07 	bl	8007d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800712a:	1d3a      	adds	r2, r7, #4
 800712c:	f107 0314 	add.w	r3, r7, #20
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fc22 	bl	800797c <xTaskCheckForTimeOut>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d124      	bne.n	8007188 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800713e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007140:	f000 f985 	bl	800744e <prvIsQueueFull>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d018      	beq.n	800717c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	3310      	adds	r3, #16
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fb76 	bl	8007844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800715a:	f000 f926 	bl	80073aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800715e:	f000 f99d 	bl	800749c <xTaskResumeAll>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f af7c 	bne.w	8007062 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <xQueueGenericSend+0x1f8>)
 800716c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	e772      	b.n	8007062 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800717c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800717e:	f000 f914 	bl	80073aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007182:	f000 f98b 	bl	800749c <xTaskResumeAll>
 8007186:	e76c      	b.n	8007062 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800718a:	f000 f90e 	bl	80073aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800718e:	f000 f985 	bl	800749c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007192:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007194:	4618      	mov	r0, r3
 8007196:	3738      	adds	r7, #56	; 0x38
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b090      	sub	sp, #64	; 0x40
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <xQueueGenericSendFromISR+0x3c>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <xQueueGenericSendFromISR+0x40>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <xQueueGenericSendFromISR+0x42>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d103      	bne.n	800720a <xQueueGenericSendFromISR+0x6a>
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <xQueueGenericSendFromISR+0x6e>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <xQueueGenericSendFromISR+0x70>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	623b      	str	r3, [r7, #32]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800722a:	f000 fe07 	bl	8007e3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800722e:	f3ef 8211 	mrs	r2, BASEPRI
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	61fa      	str	r2, [r7, #28]
 8007244:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007246:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	429a      	cmp	r2, r3
 8007254:	d302      	bcc.n	800725c <xQueueGenericSendFromISR+0xbc>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d12f      	bne.n	80072bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007272:	f000 f830 	bl	80072d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007276:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d112      	bne.n	80072a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d016      	beq.n	80072b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fafd 	bl	800788c <xTaskRemoveFromEventList>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00e      	beq.n	80072b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e007      	b.n	80072b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072aa:	3301      	adds	r3, #1
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	b25a      	sxtb	r2, r3
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072b6:	2301      	movs	r3, #1
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80072ba:	e001      	b.n	80072c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3740      	adds	r7, #64	; 0x40
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b086      	sub	sp, #24
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d14d      	bne.n	8007398 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fbe7 	bl	8007ad4 <xTaskPriorityDisinherit>
 8007306:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]
 800730e:	e043      	b.n	8007398 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d119      	bne.n	800734a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6858      	ldr	r0, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	461a      	mov	r2, r3
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	f000 fe97 	bl	8008054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	441a      	add	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	429a      	cmp	r2, r3
 800733e:	d32b      	bcc.n	8007398 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	e026      	b.n	8007398 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68d8      	ldr	r0, [r3, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	461a      	mov	r2, r3
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	f000 fe7d 	bl	8008054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	425b      	negs	r3, r3
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d207      	bcs.n	8007386 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	425b      	negs	r3, r3
 8007380:	441a      	add	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d105      	bne.n	8007398 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073a0:	697b      	ldr	r3, [r7, #20]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073b2:	f000 fc91 	bl	8007cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073be:	e011      	b.n	80073e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fa5d 	bl	800788c <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073d8:	f000 fb32 	bl	8007a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	3b01      	subs	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dce9      	bgt.n	80073c0 <prvUnlockQueue+0x16>
 80073ec:	e000      	b.n	80073f0 <prvUnlockQueue+0x46>
					break;
 80073ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073f8:	f000 fc9e 	bl	8007d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073fc:	f000 fc6c 	bl	8007cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007406:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007408:	e011      	b.n	800742e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d012      	beq.n	8007438 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3310      	adds	r3, #16
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fa38 	bl	800788c <xTaskRemoveFromEventList>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007422:	f000 fb0d 	bl	8007a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	3b01      	subs	r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800742e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dce9      	bgt.n	800740a <prvUnlockQueue+0x60>
 8007436:	e000      	b.n	800743a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007438:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	22ff      	movs	r2, #255	; 0xff
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007442:	f000 fc79 	bl	8007d38 <vPortExitCritical>
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007456:	f000 fc3f 	bl	8007cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	429a      	cmp	r2, r3
 8007464:	d102      	bne.n	800746c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e001      	b.n	8007470 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007470:	f000 fc62 	bl	8007d38 <vPortExitCritical>

	return xReturn;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <vTaskSuspendAll+0x18>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	4a03      	ldr	r2, [pc, #12]	; (8007498 <vTaskSuspendAll+0x18>)
 800748c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	200003bc 	.word	0x200003bc

0800749c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074aa:	4b41      	ldr	r3, [pc, #260]	; (80075b0 <xTaskResumeAll+0x114>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	603b      	str	r3, [r7, #0]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074c8:	f000 fc06 	bl	8007cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074cc:	4b38      	ldr	r3, [pc, #224]	; (80075b0 <xTaskResumeAll+0x114>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	4a37      	ldr	r2, [pc, #220]	; (80075b0 <xTaskResumeAll+0x114>)
 80074d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d6:	4b36      	ldr	r3, [pc, #216]	; (80075b0 <xTaskResumeAll+0x114>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d161      	bne.n	80075a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074de:	4b35      	ldr	r3, [pc, #212]	; (80075b4 <xTaskResumeAll+0x118>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d05d      	beq.n	80075a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e6:	e02e      	b.n	8007546 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e8:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <xTaskResumeAll+0x11c>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3318      	adds	r3, #24
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fd2a 	bl	8006f4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fd25 	bl	8006f4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	2201      	movs	r2, #1
 800750a:	409a      	lsls	r2, r3
 800750c:	4b2b      	ldr	r3, [pc, #172]	; (80075bc <xTaskResumeAll+0x120>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4313      	orrs	r3, r2
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <xTaskResumeAll+0x120>)
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <xTaskResumeAll+0x124>)
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3304      	adds	r3, #4
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f7ff fcb1 	bl	8006e94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <xTaskResumeAll+0x128>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	429a      	cmp	r2, r3
 800753e:	d302      	bcc.n	8007546 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007540:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <xTaskResumeAll+0x12c>)
 8007542:	2201      	movs	r2, #1
 8007544:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <xTaskResumeAll+0x11c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1cc      	bne.n	80074e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007554:	f000 fa80 	bl	8007a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007558:	4b1c      	ldr	r3, [pc, #112]	; (80075cc <xTaskResumeAll+0x130>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d010      	beq.n	8007586 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007564:	f000 f836 	bl	80075d4 <xTaskIncrementTick>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800756e:	4b16      	ldr	r3, [pc, #88]	; (80075c8 <xTaskResumeAll+0x12c>)
 8007570:	2201      	movs	r2, #1
 8007572:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f1      	bne.n	8007564 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007580:	4b12      	ldr	r3, [pc, #72]	; (80075cc <xTaskResumeAll+0x130>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <xTaskResumeAll+0x12c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007592:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <xTaskResumeAll+0x134>)
 8007594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075a2:	f000 fbc9 	bl	8007d38 <vPortExitCritical>

	return xAlreadyYielded;
 80075a6:	68bb      	ldr	r3, [r7, #8]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200003bc 	.word	0x200003bc
 80075b4:	2000039c 	.word	0x2000039c
 80075b8:	20000374 	.word	0x20000374
 80075bc:	200003a4 	.word	0x200003a4
 80075c0:	200002e0 	.word	0x200002e0
 80075c4:	200002dc 	.word	0x200002dc
 80075c8:	200003b0 	.word	0x200003b0
 80075cc:	200003ac 	.word	0x200003ac
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075de:	4b4e      	ldr	r3, [pc, #312]	; (8007718 <xTaskIncrementTick+0x144>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 808e 	bne.w	8007704 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075e8:	4b4c      	ldr	r3, [pc, #304]	; (800771c <xTaskIncrementTick+0x148>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075f0:	4a4a      	ldr	r2, [pc, #296]	; (800771c <xTaskIncrementTick+0x148>)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d120      	bne.n	800763e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075fc:	4b48      	ldr	r3, [pc, #288]	; (8007720 <xTaskIncrementTick+0x14c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <xTaskIncrementTick+0x48>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	603b      	str	r3, [r7, #0]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <xTaskIncrementTick+0x46>
 800761c:	4b40      	ldr	r3, [pc, #256]	; (8007720 <xTaskIncrementTick+0x14c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	4b40      	ldr	r3, [pc, #256]	; (8007724 <xTaskIncrementTick+0x150>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <xTaskIncrementTick+0x14c>)
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <xTaskIncrementTick+0x150>)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	4b3d      	ldr	r3, [pc, #244]	; (8007728 <xTaskIncrementTick+0x154>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a3c      	ldr	r2, [pc, #240]	; (8007728 <xTaskIncrementTick+0x154>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	f000 fa0d 	bl	8007a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800763e:	4b3b      	ldr	r3, [pc, #236]	; (800772c <xTaskIncrementTick+0x158>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d348      	bcc.n	80076da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007648:	4b35      	ldr	r3, [pc, #212]	; (8007720 <xTaskIncrementTick+0x14c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	4b36      	ldr	r3, [pc, #216]	; (800772c <xTaskIncrementTick+0x158>)
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	601a      	str	r2, [r3, #0]
					break;
 800765a:	e03e      	b.n	80076da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765c:	4b30      	ldr	r3, [pc, #192]	; (8007720 <xTaskIncrementTick+0x14c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d203      	bcs.n	800767c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007674:	4a2d      	ldr	r2, [pc, #180]	; (800772c <xTaskIncrementTick+0x158>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800767a:	e02e      	b.n	80076da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3304      	adds	r3, #4
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fc64 	bl	8006f4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3318      	adds	r3, #24
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fc5b 	bl	8006f4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	2201      	movs	r2, #1
 800769e:	409a      	lsls	r2, r3
 80076a0:	4b23      	ldr	r3, [pc, #140]	; (8007730 <xTaskIncrementTick+0x15c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	4a22      	ldr	r2, [pc, #136]	; (8007730 <xTaskIncrementTick+0x15c>)
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <xTaskIncrementTick+0x160>)
 80076b8:	441a      	add	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7ff fbe7 	bl	8006e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <xTaskIncrementTick+0x164>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3b9      	bcc.n	8007648 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d8:	e7b6      	b.n	8007648 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <xTaskIncrementTick+0x164>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	4914      	ldr	r1, [pc, #80]	; (8007734 <xTaskIncrementTick+0x160>)
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d901      	bls.n	80076f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <xTaskIncrementTick+0x168>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e004      	b.n	800770e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <xTaskIncrementTick+0x16c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <xTaskIncrementTick+0x16c>)
 800770c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800770e:	697b      	ldr	r3, [r7, #20]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	200003bc 	.word	0x200003bc
 800771c:	200003a0 	.word	0x200003a0
 8007720:	2000036c 	.word	0x2000036c
 8007724:	20000370 	.word	0x20000370
 8007728:	200003b4 	.word	0x200003b4
 800772c:	200003b8 	.word	0x200003b8
 8007730:	200003a4 	.word	0x200003a4
 8007734:	200002e0 	.word	0x200002e0
 8007738:	200002dc 	.word	0x200002dc
 800773c:	200003b0 	.word	0x200003b0
 8007740:	200003ac 	.word	0x200003ac

08007744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800774a:	4b39      	ldr	r3, [pc, #228]	; (8007830 <vTaskSwitchContext+0xec>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007752:	4b38      	ldr	r3, [pc, #224]	; (8007834 <vTaskSwitchContext+0xf0>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007758:	e066      	b.n	8007828 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800775a:	4b36      	ldr	r3, [pc, #216]	; (8007834 <vTaskSwitchContext+0xf0>)
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007760:	4b35      	ldr	r3, [pc, #212]	; (8007838 <vTaskSwitchContext+0xf4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	429a      	cmp	r2, r3
 8007776:	d111      	bne.n	800779c <vTaskSwitchContext+0x58>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3304      	adds	r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	429a      	cmp	r2, r3
 8007782:	d10b      	bne.n	800779c <vTaskSwitchContext+0x58>
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3308      	adds	r3, #8
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d105      	bne.n	800779c <vTaskSwitchContext+0x58>
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	330c      	adds	r3, #12
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	429a      	cmp	r2, r3
 800779a:	d008      	beq.n	80077ae <vTaskSwitchContext+0x6a>
 800779c:	4b26      	ldr	r3, [pc, #152]	; (8007838 <vTaskSwitchContext+0xf4>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4b25      	ldr	r3, [pc, #148]	; (8007838 <vTaskSwitchContext+0xf4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3334      	adds	r3, #52	; 0x34
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7f8 fea7 	bl	80004fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b23      	ldr	r3, [pc, #140]	; (800783c <vTaskSwitchContext+0xf8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	f1c3 031f 	rsb	r3, r3, #31
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	491e      	ldr	r1, [pc, #120]	; (8007840 <vTaskSwitchContext+0xfc>)
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <vTaskSwitchContext+0xaa>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	607b      	str	r3, [r7, #4]
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <vTaskSwitchContext+0xa8>
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4a11      	ldr	r2, [pc, #68]	; (8007840 <vTaskSwitchContext+0xfc>)
 80077fa:	4413      	add	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	605a      	str	r2, [r3, #4]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3308      	adds	r3, #8
 8007810:	429a      	cmp	r2, r3
 8007812:	d104      	bne.n	800781e <vTaskSwitchContext+0xda>
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <vTaskSwitchContext+0xf4>)
 8007826:	6013      	str	r3, [r2, #0]
}
 8007828:	bf00      	nop
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	200003bc 	.word	0x200003bc
 8007834:	200003b0 	.word	0x200003b0
 8007838:	200002dc 	.word	0x200002dc
 800783c:	200003a4 	.word	0x200003a4
 8007840:	200002e0 	.word	0x200002e0

08007844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <vTaskPlaceOnEventList+0x44>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3318      	adds	r3, #24
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fb32 	bl	8006edc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007878:	2101      	movs	r1, #1
 800787a:	6838      	ldr	r0, [r7, #0]
 800787c:	f000 f9b0 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	200002dc 	.word	0x200002dc

0800788c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3318      	adds	r3, #24
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fb46 	bl	8006f4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <xTaskRemoveFromEventList+0xac>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d11c      	bne.n	8007904 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fb3d 	bl	8006f4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	2201      	movs	r2, #1
 80078da:	409a      	lsls	r2, r3
 80078dc:	4b17      	ldr	r3, [pc, #92]	; (800793c <xTaskRemoveFromEventList+0xb0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	4a16      	ldr	r2, [pc, #88]	; (800793c <xTaskRemoveFromEventList+0xb0>)
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <xTaskRemoveFromEventList+0xb4>)
 80078f4:	441a      	add	r2, r3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f7ff fac9 	bl	8006e94 <vListInsertEnd>
 8007902:	e005      	b.n	8007910 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3318      	adds	r3, #24
 8007908:	4619      	mov	r1, r3
 800790a:	480e      	ldr	r0, [pc, #56]	; (8007944 <xTaskRemoveFromEventList+0xb8>)
 800790c:	f7ff fac2 	bl	8006e94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <xTaskRemoveFromEventList+0xbc>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	429a      	cmp	r2, r3
 800791c:	d905      	bls.n	800792a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <xTaskRemoveFromEventList+0xc0>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e001      	b.n	800792e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800792e:	697b      	ldr	r3, [r7, #20]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200003bc 	.word	0x200003bc
 800793c:	200003a4 	.word	0x200003a4
 8007940:	200002e0 	.word	0x200002e0
 8007944:	20000374 	.word	0x20000374
 8007948:	200002dc 	.word	0x200002dc
 800794c:	200003b0 	.word	0x200003b0

08007950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007958:	4b06      	ldr	r3, [pc, #24]	; (8007974 <vTaskInternalSetTimeOutState+0x24>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <vTaskInternalSetTimeOutState+0x28>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	605a      	str	r2, [r3, #4]
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	200003b4 	.word	0x200003b4
 8007978:	200003a0 	.word	0x200003a0

0800797c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	613b      	str	r3, [r7, #16]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	60fb      	str	r3, [r7, #12]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079be:	f000 f98b 	bl	8007cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079c2:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <xTaskCheckForTimeOut+0xbc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d102      	bne.n	80079e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	e023      	b.n	8007a2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <xTaskCheckForTimeOut+0xc0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d007      	beq.n	80079fe <xTaskCheckForTimeOut+0x82>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e015      	b.n	8007a2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d20b      	bcs.n	8007a20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff9b 	bl	8007950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	e004      	b.n	8007a2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a2a:	f000 f985 	bl	8007d38 <vPortExitCritical>

	return xReturn;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200003a0 	.word	0x200003a0
 8007a3c:	200003b4 	.word	0x200003b4

08007a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <vTaskMissedYield+0x14>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	200003b0 	.word	0x200003b0

08007a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	; (8007a90 <prvResetNextTaskUnblockTime+0x38>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <prvResetNextTaskUnblockTime+0x3c>)
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a70:	e008      	b.n	8007a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <prvResetNextTaskUnblockTime+0x38>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <prvResetNextTaskUnblockTime+0x3c>)
 8007a82:	6013      	str	r3, [r2, #0]
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	2000036c 	.word	0x2000036c
 8007a94:	200003b8 	.word	0x200003b8

08007a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <xTaskGetSchedulerState+0x34>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	607b      	str	r3, [r7, #4]
 8007aaa:	e008      	b.n	8007abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aac:	4b08      	ldr	r3, [pc, #32]	; (8007ad0 <xTaskGetSchedulerState+0x38>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	e001      	b.n	8007abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007abe:	687b      	ldr	r3, [r7, #4]
	}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	200003a8 	.word	0x200003a8
 8007ad0:	200003bc 	.word	0x200003bc

08007ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06e      	beq.n	8007bc8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007aea:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <xTaskPriorityDisinherit+0x100>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d00a      	beq.n	8007b0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60fb      	str	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60bb      	str	r3, [r7, #8]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2c:	1e5a      	subs	r2, r3, #1
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d044      	beq.n	8007bc8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d140      	bne.n	8007bc8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff f9ff 	bl	8006f4e <uxListRemove>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d115      	bne.n	8007b82 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	491f      	ldr	r1, [pc, #124]	; (8007bd8 <xTaskPriorityDisinherit+0x104>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xTaskPriorityDisinherit+0xae>
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2201      	movs	r2, #1
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	43da      	mvns	r2, r3
 8007b78:	4b18      	ldr	r3, [pc, #96]	; (8007bdc <xTaskPriorityDisinherit+0x108>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <xTaskPriorityDisinherit+0x108>)
 8007b80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	f1c3 0207 	rsb	r2, r3, #7
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <xTaskPriorityDisinherit+0x108>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <xTaskPriorityDisinherit+0x108>)
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <xTaskPriorityDisinherit+0x104>)
 8007bb6:	441a      	add	r2, r3
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f7ff f968 	bl	8006e94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bc8:	697b      	ldr	r3, [r7, #20]
	}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200002dc 	.word	0x200002dc
 8007bd8:	200002e0 	.word	0x200002e0
 8007bdc:	200003a4 	.word	0x200003a4

08007be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bea:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf0:	4b28      	ldr	r3, [pc, #160]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f9a9 	bl	8006f4e <uxListRemove>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	2201      	movs	r2, #1
 8007c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4013      	ands	r3, r2
 8007c16:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d10a      	bne.n	8007c38 <prvAddCurrentTaskToDelayedList+0x58>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	481a      	ldr	r0, [pc, #104]	; (8007c9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c32:	f7ff f92f 	bl	8006e94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c36:	e026      	b.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d209      	bcs.n	8007c64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c50:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f7ff f93d 	bl	8006edc <vListInsert>
}
 8007c62:	e010      	b.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7ff f933 	bl	8006edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c76:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d202      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200003a0 	.word	0x200003a0
 8007c94:	200002dc 	.word	0x200002dc
 8007c98:	200003a4 	.word	0x200003a4
 8007c9c:	20000388 	.word	0x20000388
 8007ca0:	20000370 	.word	0x20000370
 8007ca4:	2000036c 	.word	0x2000036c
 8007ca8:	200003b8 	.word	0x200003b8
 8007cac:	00000000 	.word	0x00000000

08007cb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <pxCurrentTCBConst2>)
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	6808      	ldr	r0, [r1, #0]
 8007cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	f380 8809 	msr	PSP, r0
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8811 	msr	BASEPRI, r0
 8007cca:	4770      	bx	lr
 8007ccc:	f3af 8000 	nop.w

08007cd0 <pxCurrentTCBConst2>:
 8007cd0:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <vPortEnterCritical+0x58>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	4a0d      	ldr	r2, [pc, #52]	; (8007d30 <vPortEnterCritical+0x58>)
 8007cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <vPortEnterCritical+0x58>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d10f      	bne.n	8007d24 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d04:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <vPortEnterCritical+0x5c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	603b      	str	r3, [r7, #0]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <vPortEnterCritical+0x4a>
	}
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	2000000c 	.word	0x2000000c
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <vPortExitCritical+0x50>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <vPortExitCritical+0x24>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	607b      	str	r3, [r7, #4]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <vPortExitCritical+0x50>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <vPortExitCritical+0x50>)
 8007d64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <vPortExitCritical+0x50>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d105      	bne.n	8007d7a <vPortExitCritical+0x42>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f383 8811 	msr	BASEPRI, r3
}
 8007d78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	2000000c 	.word	0x2000000c
 8007d8c:	00000000 	.word	0x00000000

08007d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d90:	f3ef 8009 	mrs	r0, PSP
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <pxCurrentTCBConst>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	f01e 0f10 	tst.w	lr, #16
 8007da0:	bf08      	it	eq
 8007da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007db4:	f380 8811 	msr	BASEPRI, r0
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f7ff fcc0 	bl	8007744 <vTaskSwitchContext>
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f380 8811 	msr	BASEPRI, r0
 8007dcc:	bc09      	pop	{r0, r3}
 8007dce:	6819      	ldr	r1, [r3, #0]
 8007dd0:	6808      	ldr	r0, [r1, #0]
 8007dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd6:	f01e 0f10 	tst.w	lr, #16
 8007dda:	bf08      	it	eq
 8007ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007de0:	f380 8809 	msr	PSP, r0
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst>:
 8007df0:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f7ff fbdf 	bl	80075d4 <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <SysTick_Handler+0x40>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e42:	f3ef 8305 	mrs	r3, IPSR
 8007e46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b0f      	cmp	r3, #15
 8007e4c:	d914      	bls.n	8007e78 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e4e:	4a17      	ldr	r2, [pc, #92]	; (8007eac <vPortValidateInterruptPriority+0x70>)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <vPortValidateInterruptPriority+0x74>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	7afa      	ldrb	r2, [r7, #11]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d20a      	bcs.n	8007e78 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <vPortValidateInterruptPriority+0x78>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <vPortValidateInterruptPriority+0x7c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d90a      	bls.n	8007e9e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	603b      	str	r3, [r7, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <vPortValidateInterruptPriority+0x60>
	}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	e000e3f0 	.word	0xe000e3f0
 8007eb0:	200003c0 	.word	0x200003c0
 8007eb4:	e000ed0c 	.word	0xe000ed0c
 8007eb8:	200003c4 	.word	0x200003c4

08007ebc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe feb4 	bl	8006c38 <USBH_LL_IncTimer>
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fef8 	bl	8006cdc <USBH_LL_Connect>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe ff0d 	bl	8006d22 <USBH_LL_Disconnect>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe ff2d 	bl	8006d86 <USBH_LL_NotifyURBChange>
#endif
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fea2 	bl	8006c8c <USBH_LL_PortEnabled>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe feae 	bl	8006cc0 <USBH_LL_PortDisabled>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fa f909 	bl	800219a <HAL_HCD_Stop>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f808 	bl	8007fa4 <USBH_Get_USB_Status>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d817      	bhi.n	8007fe8 <USBH_Get_USB_Status+0x44>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <USBH_Get_USB_Status+0x1c>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd1 	.word	0x08007fd1
 8007fc4:	08007fd7 	.word	0x08007fd7
 8007fc8:	08007fdd 	.word	0x08007fdd
 8007fcc:	08007fe3 	.word	0x08007fe3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd4:	e00b      	b.n	8007fee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fda:	e008      	b.n	8007fee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe0:	e005      	b.n	8007fee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe6:	e002      	b.n	8007fee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	73fb      	strb	r3, [r7, #15]
    break;
 8007fec:	bf00      	nop
  }
  return usb_status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <memset>:
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4603      	mov	r3, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	d100      	bne.n	8008006 <memset+0xa>
 8008004:	4770      	bx	lr
 8008006:	f803 1b01 	strb.w	r1, [r3], #1
 800800a:	e7f9      	b.n	8008000 <memset+0x4>

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	; (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	; (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	; (8008050 <__libc_init_array+0x44>)
 8008020:	f000 f826 	bl	8008070 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	080080b8 	.word	0x080080b8
 8008048:	080080b8 	.word	0x080080b8
 800804c:	080080b8 	.word	0x080080b8
 8008050:	080080bc 	.word	0x080080bc

08008054 <memcpy>:
 8008054:	440a      	add	r2, r1
 8008056:	4291      	cmp	r1, r2
 8008058:	f100 33ff 	add.w	r3, r0, #4294967295
 800805c:	d100      	bne.n	8008060 <memcpy+0xc>
 800805e:	4770      	bx	lr
 8008060:	b510      	push	{r4, lr}
 8008062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806a:	4291      	cmp	r1, r2
 800806c:	d1f9      	bne.n	8008062 <memcpy+0xe>
 800806e:	bd10      	pop	{r4, pc}

08008070 <_init>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	bf00      	nop
 8008074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008076:	bc08      	pop	{r3}
 8008078:	469e      	mov	lr, r3
 800807a:	4770      	bx	lr

0800807c <_fini>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	bf00      	nop
 8008080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008082:	bc08      	pop	{r3}
 8008084:	469e      	mov	lr, r3
 8008086:	4770      	bx	lr
